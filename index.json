{"project": "retworkx", "project_url": "https://github.com/Qiskit/retworkx", "show_commit_url": "http://github.com/Qiskit/retworkx/commit/", "hash_length": 8, "revision_to_hash": {"28": "1cb22074dc853507ad442961f3614e68b4c57938", "40": "56cc3543d7ec2832149dc889327c3c09926dddec", "46": "0ef3793353ce2616d693a34b4749466a618554d5", "61": "aed5c5c3369d65ff86fc7a6e4c7aab8a3a202234", "62": "7f8f2ac9dd872ad05bcecc5f95000fa59a7ea212", "78": "619b2a06bebd77cbc2093de59a6e3c3845c7494f", "81": "c24eb54f315fa09678c53da2762d5d4a104afb1a", "86": "0da6f413e9178afb6e68c5416ebfe7f8f4cbc16a", "88": "302d3b62b348b3658a55f07503a9970ee3e51a7a", "91": "ae48dc30b579bfc694f3b2aa198d87fba3eeb8e0", "107": "29418f7cd5ab392ebea2b0f22b07d657a1a9a70d", "123": "308202349867831a16c2df739edde7fd25ef26a2", "156": "7d2c1840aba57814fe91bc8f3392f9bdd1ee0b9f", "176": "030010d2509e6cb8220f0a90cfea624e2dd898b9", "185": "28994db3f1b9b0c4406dc10e782690bf35b64387", "192": "6666adf16a4c36519de6c3cc2dac8ea44f37609e", "214": "7c9ffa4be0df25ffb99e6420a94fecb2b52b8f0a", "269": "6afe29b8347e0bbcbd2b8de7bc67e2f79e1212df", "449": "7d889f9a9e172214f0e5380acbe467cccd7a6b7b", "682": "547c30b3d4f831e4f92a4ac7867f8f47ee7f19be", "686": "4116d1aeb43a9c40493b4d74ffffec61baba25ab", "690": "10603ce3aaf4117d317d87a39d68a2808beaefec", "696": "ca8e214ca0dc57904b3741bcc6612090ef8dfeb1", "699": "51ad54345dcdb12c86170b5a429c8d4d03eed66b", "701": "f9b391d6a9e591e4dbeddfdb0a95b332c39915f6", "710": "29e76fdf0c0ffb564cb9747d5124e331d5322776", "716": "c3543a892611243008c9977394d139c759bb4db4", "723": "97e57620de665fa90d52d4d55b1e9164eda122cd", "732": "1a612fb051208c763cec7905e34292cff18d3766", "741": "9487df8e88b8920e7b7c11f4a12e27e2eb1b2faa", "743": "9208d0c460878bb9e3c36a62a3597a195a67de8e", "761": "1b0ab326966ce1be1cb0aef9a2430b127539eae3", "768": "4d66ef43b57f6038f1084fb78141267505744173", "775": "7db288cf9c478391b0b55d0f154d6040ffc2bf7b", "778": "ba6f6e1080c502adced9bdcabf94da88da1e5f20", "781": "b92db69724e23e855e714bc3bbe445eaf3138a68", "788": "fff0fae5ae920314eea783806cf71595492069de", "792": "9c4ecf5abc9449925d1b411dc8a6595c8977ef99", "797": "98523832e36161ad4fa85a7f73d1aa7a04427a8c", "799": "b25d7ad4309b80c914e64ab9b4ab9829889309ef", "809": "59fb79d2e1fad704e5a61b3d12d018c3db73ffd2", "815": "db0b016ca0fbb7cdcc8efea7e2b63bf5fb1e2568", "819": "60e72d3ca1c7f4c88083230e155e155c27b06256", "827": "15534ac437abb834dc522bf37be24dd4fedbbe11", "834": "12eb6c33ac8a28e37fb3b24b134313bcfc70b884", "837": "bbf0f0c3b63779a8dda49981283ba7dc307cbe24", "845": "83e3b8597e230b7dedbf1a6179d992fd425c1a24", "857": "a0a809d945b42214314595537af79d7f4b95b462", "859": "f0d5254bdeaf4a5bdc24c738f8f66721ee680af4", "870": "f35becf5cddf7f7344e3b456544a8a3dda1a88f5", "874": "d8bd4705c8ece273fb185ff34f53506871e14e59", "876": "54cc35c53e7050a25dd57ad2e9233a7f60cbf178", "886": "b790a86b0cf7644b94e1a3f9e2ed79cd52a94d20", "900": "0ef76fe2624a2587b701eccf0684797f14400e0f", "902": "009c625177885b0d8444c0002de37ad635f47bd2", "908": "5a4f906ec5a098af56229b24969acc130b82ba73", "920": "635bf2e94a21436fd75095b9ef57de735ad50907", "931": "d6ee63dc4d29742d8b4545fce14f0314dd2332c1", "933": "bca91c60a686c46c0cd5a0649a54aa4773df1b80", "935": "05ecef01cf8661bc6dfb8836e06c4fbd1a112dba", "937": "beda066ac2080ed75b6b4982e097b7e772e3277e", "945": "fdff46a60606618f38fb8e9981643894070600a5", "947": "0b19f2383fd40ff9a0d9a8e415e80e36b0d872d8", "951": "4a71b5d299b0610f8729ab3f6752b92c4a290ad1", "955": "b6ecea56b5413b9fdb6222d730166f5b04d94d91", "957": "857947d971072c39ea89d0ab47092c4837fdca71", "961": "174a54a806a892b7c669bfd123ed56bde46e1931", "964": "affc57cbde630dc956f7d51a0b9c1b2df880a031", "976": "a06d578c69c0976d172db6bb39673a853129a854", "985": "c97afd24514c0b99a2008a9f57adc227a73e3b7c", "987": "6782e55b91a2bb67f1b264ec31ae539830f136a5", "991": "d28926047c7aa3b2bf28636609679b91ad44d486", "995": "0ce32e0066dd743e92b4a45f651fcb7eaeb0df76", "1006": "27e22547f3ad016568d67b9d640c93c3c9f36aa0", "1008": "7ebd64b19e79e7b6e91a1a2e2d9dedb6cbc88184", "1010": "d735c76ab46cc3a57e9070d6165d21a660fdc09b", "1013": "1b2abd78c4916942334264bec2cd46dea529402c", "1020": "8c420de4c0b2ee6e6916525ed190dd1af7218719", "1022": "75ffd0dfecdc0eed971038e0ceaeca7b1f9ae792", "1024": "7602a7b54c6e725c269e293b8fbc80e247013c2d", "1033": "a3249f0825028c1799984547e9c62bcd2cef89ab", "1048": "dd220ea5f2d72c9b92ff243efeab8bdb2ee52517", "1052": "60b6e25d4e387ab284426073541e64fe780e5ba0", "1063": "36d97600e050be8375848569dc1b17e67c7b9862", "1067": "0cd27690269945c5df80ed3a333c6227572b2ecd", "1075": "fad532091c2ff5bd8e64b85e637ad4abdf0f0f85", "1096": "6ee3dfd5c4ce7d27490daedabc579cdae50efe13", "1108": "0e42ab043f90fe9eb72f7a658e1907ce1bdc7247", "1116": "2026e7d12ec3799cad4dc7c507c2367cb6fab3f4", "1133": "9d8d505acb48a97a75595602fa9ac7c80661d687", "1135": "f908abb98d210eafcac0cff8e3b8b7da22f0457b", "1138": "00c9584753fdf9e59c76d7287a67b6288f5562f6", "1141": "8d2fdcc777f383bce16d6104e0dcf5cbdc7d6b92", "1151": "e73c2949df074cd7bd25ce7b2177722889c796f6", "1161": "8c7a7433cd7f27b10fecfaba1307032229307864", "1165": "49727f82c4d93ea8dfd76c69a2751173af38501e", "1176": "dc359f7e023b1287c0d2d1c21fdf5f5e23dc6eb1", "1178": "bbcb0d55c1dbb0c575b1be3a29a9594e3bb68a14", "1191": "69bd097ec0113348fc21651771075c4fa1ce584d", "1199": "7e889b27a4822df16c70238c5b476bbf2764e97f", "1206": "bc9a18a7565d92f6972d1db66244b01f46d08e95", "1215": "dbbec6f825bdec1ed2c8df3a5e77fb304f13d4ac", "1227": "fda4b52b814882035afa39e82549e3228150a548", "1234": "d7e37bd1e2714d5c3346e81841a3ab0f15acd9ad", "1247": "cca09932b3ae424fbf32871bb8d311ca02f206a0", "1249": "84536a9de40e9ca42965a35a0f95a0f5fb1b16bf", "1252": "3537af5b39fa918d7229fe9b0ed6c9e2aaaee43f", "1267": "b1f973630cb352950fbdeabd4b4c60191a62a6e7"}, "revision_to_date": {"28": 1557594406000, "40": 1557766681000, "46": 1557781437000, "61": 1557845995000, "62": 1557851243000, "78": 1557933573000, "81": 1558034985000, "86": 1558543096000, "88": 1559334124000, "91": 1568842772000, "107": 1580145188000, "123": 1580495782000, "156": 1581367679000, "176": 1582236247000, "185": 1583536541000, "192": 1584112085000, "214": 1584560596000, "269": 1587986404000, "449": 1594986606000, "682": 1600431262000, "686": 1600713541000, "690": 1600816377000, "696": 1601321859000, "699": 1601368916000, "701": 1601460426000, "710": 1601507822000, "716": 1601589723000, "723": 1601645441000, "732": 1601747700000, "741": 1601927496000, "743": 1602006834000, "761": 1602428770000, "768": 1602544744000, "775": 1603030087000, "778": 1603034111000, "781": 1603035249000, "788": 1603118522000, "792": 1603125197000, "797": 1603193462000, "799": 1603194817000, "809": 1603227178000, "815": 1603467576000, "819": 1603734539000, "827": 1603992217000, "834": 1604000027000, "837": 1604319861000, "845": 1604330453000, "857": 1604413749000, "859": 1604414927000, "870": 1604492347000, "874": 1604645749000, "876": 1604663485000, "886": 1604695075000, "900": 1604954753000, "902": 1605010947000, "908": 1605035237000, "920": 1605135316000, "931": 1605285323000, "933": 1605288203000, "935": 1605450093000, "937": 1605453908000, "945": 1605718992000, "947": 1605722088000, "951": 1605801372000, "955": 1605805561000, "957": 1605809647000, "961": 1606150765000, "964": 1606606717000, "976": 1606691595000, "985": 1606941940000, "987": 1606994264000, "991": 1607000650000, "995": 1607028721000, "1006": 1607696197000, "1008": 1607707027000, "1010": 1607714018000, "1013": 1607723669000, "1020": 1609625840000, "1022": 1609626701000, "1024": 1609858545000, "1033": 1610287437000, "1048": 1611167784000, "1052": 1611241214000, "1063": 1611266881000, "1067": 1611268154000, "1075": 1611426100000, "1096": 1611755087000, "1108": 1611773828000, "1116": 1611794374000, "1133": 1612208867000, "1135": 1612211189000, "1138": 1612385652000, "1141": 1612545805000, "1151": 1612902478000, "1161": 1613478660000, "1165": 1613575855000, "1176": 1613945298000, "1178": 1613946669000, "1191": 1614115359000, "1199": 1614259620000, "1206": 1614266960000, "1215": 1614343262000, "1227": 1614366922000, "1234": 1614645664000, "1247": 1614699722000, "1249": 1614702132000, "1252": 1614713795000, "1267": 1614787800000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-6900K CPU @ 4.20GHz"], "machine": ["zeong"], "os": ["Linux 4.18.3-arch1-1-ARCH"], "ram": ["128GB"], "python": ["3.8"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6900K CPU @ 4.20GHz", "machine": "zeong", "os": "Linux 4.18.3-arch1-1-ARCH", "ram": "128GB", "python": "3.8", "branch": "master"}], "benchmarks": {"adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix": {"code": "class DiGraphAdjacencyMatrixBenchmarks:\n    def peakmem_adjacency_matrix(self, _, __, ___):\n        self.graph_func(self.graph, lambda x: x)\n\n    def setup(self, num_nodes, num_edges, remove_nodes):\n        if hasattr(retworkx, 'dag_adjacency_matrix'):\n            self.graph_func = retworkx.dag_adjacency_matrix\n        else:\n            self.graph_func = retworkx.digraph_adjacency_matrix\n        random.seed(4242)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        removed_node = None\n        if remove_nodes:\n            removed_node = random.randint(0, num_nodes)\n            self.graph.remove_node(removed_node)\n            nodes.remove(removed_node)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)", "name": "adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix", "param_names": ["Number of Nodes", "Number of Edges", "Removed Nodes"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"], ["False", "True"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "f3672405bc5c12270e6983ed3cf05689fe7459b74affdb84949415d8bfc61fd7"}, "adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.time_adjacency_matrix": {"code": "class DiGraphAdjacencyMatrixBenchmarks:\n    def time_adjacency_matrix(self, _, __, ___):\n        self.graph_func(self.graph, lambda x: x)\n\n    def setup(self, num_nodes, num_edges, remove_nodes):\n        if hasattr(retworkx, 'dag_adjacency_matrix'):\n            self.graph_func = retworkx.dag_adjacency_matrix\n        else:\n            self.graph_func = retworkx.digraph_adjacency_matrix\n        random.seed(4242)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        removed_node = None\n        if remove_nodes:\n            removed_node = random.randint(0, num_nodes)\n            self.graph.remove_node(removed_node)\n            nodes.remove(removed_node)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)", "min_run_count": 2, "name": "adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.time_adjacency_matrix", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Removed Nodes"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a2d858479509e414026bdc07fd83b46757d5445bfb16e4baa4eade4de1975901", "warmup_time": -1}, "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix": {"code": "class GraphAdjacencyMatrixBenchmarks:\n    def peakmem_adjacency_matrix(self, _, __):\n        retworkx.graph_adjacency_matrix(self.graph, lambda x: x)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(4242)\n        self.graph = retworkx.PyGraph()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)", "name": "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix", "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "af5b3681a08ce523c1e437b5008667790d98f38ce876ebecffceec0389e90ad4"}, "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.time_adjacency_matrix": {"code": "class GraphAdjacencyMatrixBenchmarks:\n    def time_adjacency_matrix(self, _, __):\n        retworkx.graph_adjacency_matrix(self.graph, lambda x: x)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(4242)\n        self.graph = retworkx.PyGraph()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)", "min_run_count": 2, "name": "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.time_adjacency_matrix", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "06697d805fb19951ce06aa450f752ac44bb22d1424b7d9f06d423959f3369fef", "warmup_time": -1}, "coloring.ColoringBenchmarks.time_graph_greedy_coloring": {"code": "class ColoringBenchmarks:\n    def time_graph_greedy_coloring(self, _, __):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(4242)\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        list_obj = []\n        for i in range(num_edges):\n            list_obj.append((next(node_ids), next(node_ids), i))\n        self.graph.add_edges_from(list_obj)", "min_run_count": 2, "name": "coloring.ColoringBenchmarks.time_graph_greedy_coloring", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "00207961f1bfe998535968496f6f8b052798fcbe13cb8d68cc70df19311285b3", "warmup_time": -1}, "coloring.ColoringRoadMapAsia.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapAsia:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "name": "coloring.ColoringRoadMapAsia.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "0739e06e82cd230fe4f5e987c7f10f9dce5ca6e406210de44f160102827312b1"}, "coloring.ColoringRoadMapAsia.time_graph_greedy_coloring": {"code": "class ColoringRoadMapAsia:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "coloring.ColoringRoadMapAsia.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "f1d64d2db4bbf98b06e263d9a78190ee0bacbffc8713e0c40061790cc7e8a1dc", "warmup_time": -1}, "coloring.ColoringRoadMapFullUSA.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapFullUSA:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "name": "coloring.ColoringRoadMapFullUSA.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "5a1bfea4563e78be86ce7460af9171449bd3721740b6b2d1ea285ac6e5c7982a"}, "coloring.ColoringRoadMapFullUSA.time_graph_greedy_coloring": {"code": "class ColoringRoadMapFullUSA:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "min_run_count": 2, "name": "coloring.ColoringRoadMapFullUSA.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "aca469e9430537b6bd2b84c2adb18050aec2417695830a15287cf4ff363fa2bb", "warmup_time": -1}, "coloring.ColoringRoadMapNYC.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapNYC:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "name": "coloring.ColoringRoadMapNYC.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "005d84d7e7d4970d8a9fa166e701f7a68576da54906a5032e6bbabf0be8a7968"}, "coloring.ColoringRoadMapNYC.time_graph_greedy_coloring": {"code": "class ColoringRoadMapNYC:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "min_run_count": 2, "name": "coloring.ColoringRoadMapNYC.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8c5f7c96d0aa010ab9a1b98cc757fae03330247cc54ee86dd507c28e4d49bcf3", "warmup_time": -1}, "coloring.ColoringRoadMapWesternUSA.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapWesternUSA:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "name": "coloring.ColoringRoadMapWesternUSA.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "35996c1c09114efab1003da7d7cc0bb48a39227b51035d748aa1594875b03ca0"}, "coloring.ColoringRoadMapWesternUSA.time_graph_greedy_coloring": {"code": "class ColoringRoadMapWesternUSA:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "min_run_count": 2, "name": "coloring.ColoringRoadMapWesternUSA.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a187f7a1b11aec927b9ee33b47cefbb6eabb02739d2cb6b9b245ffccca65a986", "warmup_time": -1}, "coloring.RandomGeometricGraph.peakmem_graph_greedy_coloring": {"code": "class RandomGeometricGraph:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "name": "coloring.RandomGeometricGraph.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "006cd47a0014fb27485447adf65d4516a2546a3743f54c3d5b729f84d9654f92"}, "coloring.RandomGeometricGraph.time_graph_greedy_coloring": {"code": "class RandomGeometricGraph:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "coloring.RandomGeometricGraph.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "522b8ccc41e908a99480150320c09f1d07b13177d4ed42d91dc6f5ff4eefd91f", "warmup_time": -1}, "coloring.TwoDimensionalDynamicSimulation.peakmem_graph_greedy_coloring": {"code": "class TwoDimensionalDynamicSimulation:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "name": "coloring.TwoDimensionalDynamicSimulation.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "0577dc98ba4c84bb39c5adffaa17abb515e40d75a56ed2e1946a3089bde30fb5"}, "coloring.TwoDimensionalDynamicSimulation.time_graph_greedy_coloring": {"code": "class TwoDimensionalDynamicSimulation:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "coloring.TwoDimensionalDynamicSimulation.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "ccfa3ca16f9ce717206a3c64c2941cf777f7ed190144c40527cb287c845526d6", "warmup_time": -1}, "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from": {"code": "class DiGraphAddEdgesBenchmarks:\n    def time_digraph_add_edges_from(self, _, __, ___):\n        self.graph.add_edges_from(self.list_obj)\n\n    def setup(self, num_nodes, num_edges, cycle_check):\n        self.graph = retworkx.PyDAG(cycle_check)\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3722a1a79894283417408a87918f9836a7edb26083224464e8a310b2666817b2", "warmup_time": -1}, "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from_no_data": {"code": "class DiGraphAddEdgesBenchmarks:\n    def time_digraph_add_edges_from_no_data(self, _, __, ___):\n        self.graph.add_edges_from_no_data(self.list_empty)\n\n    def setup(self, num_nodes, num_edges, cycle_check):\n        self.graph = retworkx.PyDAG(cycle_check)\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from_no_data", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f7eb04d5434d7e018a09ea2c7639e62811e799d6588faa040765d1a56d301e59", "warmup_time": -1}, "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_loop": {"code": "class DiGraphAddEdgesBenchmarks:\n    def time_digraph_add_edges_loop(self, _, __, ___):\n        for i in self.list_obj:\n            self.graph.add_edge(i[0], i[1], i[2])\n\n    def setup(self, num_nodes, num_edges, cycle_check):\n        self.graph = retworkx.PyDAG(cycle_check)\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_loop", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b6bbd7d930c00f4f8e35ec9299b018af916f3a0ff08f64f47d590e60fad9bf56", "warmup_time": -1}, "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from": {"code": "class GraphAddEdgesBenchmarks:\n    def time_graph_add_edges_from(self, _, __):\n        self.graph.add_edges_from(self.list_obj)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1fbe28be6f85c35b0c08ea2bc25d64504a60ac5d0a099819330dfa772b1ada2", "warmup_time": -1}, "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from_no_data": {"code": "class GraphAddEdgesBenchmarks:\n    def time_graph_add_edges_from_no_data(self, _, __):\n        self.graph.add_edges_from_no_data(self.list_empty)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from_no_data", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e46e5a44b14b2cbc2c386ed66ba6a25fb367af9f28bf47a69ef7dc5ce60a33c8", "warmup_time": -1}, "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_loop": {"code": "class GraphAddEdgesBenchmarks:\n    def time_graph_add_edges_loop(self, _, __):\n        for i in self.list_obj:\n            self.graph.add_edge(i[0], i[1], i[2])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_loop", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d9704b1a64ff364a1c0aa55cbde9590edd20d8cd672bf42151e5d1053e3291e0", "warmup_time": -1}, "floyd_warshall.FloydWarshall.peakmem_floyd_warshall": {"code": "class FloydWarshall:\n    def peakmem_floyd_warshall(self, _, __):\n        retworkx.floyd_warshall(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(4242)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)", "name": "floyd_warshall.FloydWarshall.peakmem_floyd_warshall", "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000"], ["10", "100", "1000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "08b42572cf9c9d288a60cc68734388667c7e6ab318eafc3e53012f108d59f88b"}, "floyd_warshall.FloydWarshall.time_floyd_warshall": {"code": "class FloydWarshall:\n    def time_floyd_warshall(self, _, __):\n        retworkx.floyd_warshall(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(4242)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)", "min_run_count": 2, "name": "floyd_warshall.FloydWarshall.time_floyd_warshall", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000"], ["10", "100", "1000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7149618172881da0e1f95fdd3275819a09a8367d5527e442184ba5f90e93929a", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_dag_creation": {"code": "class RetworkxGraphCreation:\n    def time_dag_creation(self):\n        retworkx.PyDAG()", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_dag_creation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aed6eac30f44886e8e50cbc5d7fdc37bedc9db512eb7bae4137f8d5d7278d614", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_dag_creation_with_cycle_check": {"code": "class RetworkxGraphCreation:\n    def time_dag_creation_with_cycle_check(self):\n        retworkx.PyDAG(check_cycle=True)", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_dag_creation_with_cycle_check", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "204911fe1d9d165e97490d2fbfc51b05a0bedcc0f4e33bcb1484470c5d1ca974", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_digraph_creation": {"code": "class RetworkxGraphCreation:\n    def time_digraph_creation(self):\n        retworkx.PyDiGraph()", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_digraph_creation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2423409d84f2223a07a6f63cda90e2633df04611052ce6283aa67c0a68a8907f", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_digraph_creation_with_cycle_check": {"code": "class RetworkxGraphCreation:\n    def time_digraph_creation_with_cycle_check(self):\n        retworkx.PyDiGraph(check_cycle=True)", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_digraph_creation_with_cycle_check", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ce02379d6f06c8c1a03db97c30bafbfa41cb9675460341bf1d203c90b59c0c25", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_graph_creation": {"code": "class RetworkxGraphCreation:\n    def time_graph_creation(self):\n        retworkx.PyGraph()", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_graph_creation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "93c0bf4ecde08befd82e1e224550672e948f8dedef5ab1e252a462d499c1a027", "warmup_time": -1}, "import.RetworkxImport.time_retworkx_import": {"code": "class RetworkxImport:\n    def time_retworkx_import(self):\n        call((executable, '-c', 'import retworkx'))", "min_run_count": 2, "name": "import.RetworkxImport.time_retworkx_import", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0b5d75038296cb093e3658ea7ce311e81c904efd59dccae922f8ad21ca377ff8", "warmup_time": -1}, "layers.LayersBenchmarks.peakmem_layers": {"code": "class LayersBenchmarks:\n    def peakmem_layers(self, _, __):\n        retworkx.layers(self.graph, [0])\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)", "name": "layers.LayersBenchmarks.peakmem_layers", "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "e0d4fa7d2039a0648fcd6a4d37806c252b7ca5daa7f6952621da93bb5c447cee"}, "layers.LayersBenchmarks.time_layers": {"code": "class LayersBenchmarks:\n    def time_layers(self, _, __):\n        retworkx.layers(self.graph, [0])\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)", "min_run_count": 2, "name": "layers.LayersBenchmarks.time_layers", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5f4e50a8b319f104b2fceba4e47d1ffcf608d36a453e2f295fbec78ab6e69ccd", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time___len__": {"code": "class AsiaRoadGraph:\n    def time___len__(self):\n        len(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time___len__", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a80d6bd0c47cb9607b1f0d0b549fa646668c9e5684c2aba714939d0a23d0132e", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_get_node_data": {"code": "class AsiaRoadGraph:\n    def time_get_node_data(self):\n        self.graph.get_node_data(5210)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_get_node_data", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d9db835cd065039b7714d3c801d8bcc846bdbc8dd5a87dd099885f8c346df0b9", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_nodes": {"code": "class AsiaRoadGraph:\n    def time_nodes(self):\n        self.graph.nodes()\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_nodes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "957a2d9f7f56cb141316054d3b967c3710a14d6546441f05b503535f3f6b1aab", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_nodes_indexes": {"code": "class AsiaRoadGraph:\n    def time_nodes_indexes(self):\n        self.graph.node_indexes()\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_nodes_indexes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f099ad8d06e84080dab36b14ae7999af94898ae8682e49529f755269e230f6a7", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_remove_node": {"code": "class AsiaRoadGraph:\n    def time_remove_node(self):\n        self.graph.remove_node(425)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_remove_node", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2d4a343ade456aa3492c7046ac209238581bae1db709ed06f186f6f5e90d868b", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_remove_nodes_from": {"code": "class AsiaRoadGraph:\n    def time_remove_nodes_from(self):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"asia.osm.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_remove_nodes_from", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eded7c780175660f5f0e015547cdbc5e19ddbbf256474f5d2b07cb0e7ea56256", "warmup_time": -1}, "node_benchmarks.DiGraphNodeAddition.time_add_from": {"code": "class DiGraphNodeAddition:\n    def time_add_from(self, _, __):\n        self.full_graph.add_nodes_from(self.list_obj)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyDAG()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeAddition.time_add_from", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4b66c0d55b1be171a01173a0474bcd561434822af009d458a72cb0f04dcaad76", "warmup_time": -1}, "node_benchmarks.DiGraphNodeAddition.time_add_loop": {"code": "class DiGraphNodeAddition:\n    def time_add_loop(self, _, __):\n        for i in self.list_obj:\n            self.full_graph.add_node(i)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyDAG()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeAddition.time_add_loop", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eccae2a576976d879d688c17e8dcbdcee42f8071784b318e120721f63b98e60f", "warmup_time": -1}, "node_benchmarks.DiGraphNodeCreation.time_digraph_add_node_from": {"code": "class DiGraphNodeCreation:\n    def time_digraph_add_node_from(self, _, __):\n        self.empty_digraph.add_nodes_from(self.list_objs)\n\n    def setup(self, num_nodes, cycle_check):\n        self.empty_digraph = retworkx.PyDAG(cycle_check)\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeCreation.time_digraph_add_node_from", "number": 0, "param_names": ["Number of Nodes", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1bca5a7991a4b6730eb16394c0472d2d1056283166dc51dd901181ef55d55e6a", "warmup_time": -1}, "node_benchmarks.DiGraphNodeCreation.time_digraph_add_nodes_loop": {"code": "class DiGraphNodeCreation:\n    def time_digraph_add_nodes_loop(self, _, __):\n        for i in self.list_objs:\n            self.empty_digraph.add_node(i)\n\n    def setup(self, num_nodes, cycle_check):\n        self.empty_digraph = retworkx.PyDAG(cycle_check)\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeCreation.time_digraph_add_nodes_loop", "number": 0, "param_names": ["Number of Nodes", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6d4ff336be2c7451815278eae4febd8087b21a25ae713a4ce1765bdbf58d2506", "warmup_time": -1}, "node_benchmarks.GraphNodeAddition.time_add_from": {"code": "class GraphNodeAddition:\n    def time_add_from(self, _, __):\n        self.full_graph.add_nodes_from(self.list_obj)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyGraph()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeAddition.time_add_from", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e666d11ccbae81e3fefc03caf9bb0883a93196b83b0286ea6176b09978aff5ca", "warmup_time": -1}, "node_benchmarks.GraphNodeAddition.time_add_loop": {"code": "class GraphNodeAddition:\n    def time_add_loop(self, _, __):\n        for i in self.list_obj:\n            self.full_graph.add_node(i)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyGraph()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeAddition.time_add_loop", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "39bd482ad71573985f7683ea59a2df58a66aa5770a90996e7755262918a38463", "warmup_time": -1}, "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_from": {"code": "class GraphNodeCreation:\n    def time_graph_add_nodes_from(self, _):\n        self.empty_graph.add_nodes_from(self.list_objs)\n\n    def setup(self, num_nodes):\n        self.empty_graph = retworkx.PyGraph()\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_from", "number": 0, "param_names": ["Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1aa500a939b2634d5ca86138afbb07c253a68775cbb581d690a9b45a9dd7e6b4", "warmup_time": -1}, "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_loop": {"code": "class GraphNodeCreation:\n    def time_graph_add_nodes_loop(self, _):\n        for i in self.list_objs:\n            self.empty_graph.add_node(i)\n\n    def setup(self, num_nodes):\n        self.empty_graph = retworkx.PyGraph()\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_loop", "number": 0, "param_names": ["Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "04a89c55f741d33359bb365e1dec5bc1ea4e4ad5e159a80861015df7a7e30500", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time___len__": {"code": "class RandomGeometricGraph:\n    def time___len__(self):\n        len(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time___len__", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "50205d1e937a4c5c6c9e7fa3e6492393ea9f4ed1aa9ad0c02036246fa12d032e", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_get_node_data": {"code": "class RandomGeometricGraph:\n    def time_get_node_data(self):\n        self.graph.get_node_data(5210)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_get_node_data", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b33d02f0060e470a5f590ff1b1943cf0b4285eeb0a1c4476f18ba07ab019a1ea", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_nodes": {"code": "class RandomGeometricGraph:\n    def time_nodes(self):\n        self.graph.nodes()\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_nodes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7b2bc2042ae9bde2d36c3cd1feb5fb7e06f6c64f0569f64a9e5a4458c5db45a1", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_nodes_indexes": {"code": "class RandomGeometricGraph:\n    def time_nodes_indexes(self):\n        self.graph.node_indexes()\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_nodes_indexes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eabfbf259d6218c6e2178be5e7f812108f5690ff50400210cec1b95bc1a168d4", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_remove_node": {"code": "class RandomGeometricGraph:\n    def time_remove_node(self):\n        self.graph.remove_node(425)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_remove_node", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "228a18c8d09d5aa7b394f169a0fef24cd2cfe340876f0b728f56043f7f2ce794", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_remove_nodes_from": {"code": "class RandomGeometricGraph:\n    def time_remove_nodes_from(self):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"rgg_n_2_22_s0.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_remove_nodes_from", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0cfda69943b4fcb95cba33ef4e0aa3321859a4aca4af69f06add2687b3f78ad8", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time___len__": {"code": "class RoadGraphFullUSA:\n    def time___len__(self, _):\n        len(self.graph)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time___len__", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "7a1e2d2f9f4a118708727cb6ba3be36b161305829235212e221193205defdc86", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_get_node_data": {"code": "class RoadGraphFullUSA:\n    def time_get_node_data(self, _):\n        self.graph.get_node_data(5210)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_get_node_data", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "65403bb78b2f94ed4f1fd148a59896a53d645321c8fa540504a1b73d6fd90a13", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_nodes": {"code": "class RoadGraphFullUSA:\n    def time_nodes(self, _):\n        self.graph.nodes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_nodes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "7073706c6e233e24064db5098f6c7da03bc899dde7702a5fa7323abf98292058", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_nodes_indexes": {"code": "class RoadGraphFullUSA:\n    def time_nodes_indexes(self, _):\n        self.graph.node_indexes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_nodes_indexes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "8fbceb216190a2b3cea4f26f3adf72d860be9fd0ededf05a4c80a5aa1e737461", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_remove_node": {"code": "class RoadGraphFullUSA:\n    def time_remove_node(self, _):\n        self.graph.remove_node(425)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_remove_node", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "7d4bdcdbbf9e8f8b3ec796d257e8e3d7e0ff985ea05441c05c6f97e643b9851e", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_remove_nodes_from": {"code": "class RoadGraphFullUSA:\n    def time_remove_nodes_from(self, _):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_remove_nodes_from", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "72e5a10a22045664b7a5720bf836a3625c04a55533172c6896ca67c06745b44c", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time___len__": {"code": "class RoadGraphWesternUSA:\n    def time___len__(self, _):\n        len(self.graph)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time___len__", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3f040ad58d60d4bd34a9a03b85d46ad8253e9ff6f5368e78ca2ded02dc4f1439", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_get_node_data": {"code": "class RoadGraphWesternUSA:\n    def time_get_node_data(self, _):\n        self.graph.get_node_data(5210)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_get_node_data", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e8ac041c92b55a42aa3c528254f225f61f6935b55eaab1b28f2cce2f522537fa", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_nodes": {"code": "class RoadGraphWesternUSA:\n    def time_nodes(self, _):\n        self.graph.nodes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_nodes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dc13e91d46015deb116640f431c58619750ad9ce59b30a30dc018f99973f8d11", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_nodes_indexes": {"code": "class RoadGraphWesternUSA:\n    def time_nodes_indexes(self, _):\n        self.graph.node_indexes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_nodes_indexes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3b21318b0404d0aa8b1e17aae59125d82e6f0160fe63dd56facb70a0f24c1737", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_remove_node": {"code": "class RoadGraphWesternUSA:\n    def time_remove_node(self, _):\n        self.graph.remove_node(425)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_remove_node", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d9ab7ca3c8da2b8c65a2f224e4febe22f5c81844e14b6056a82dd016c79338e1", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_remove_nodes_from": {"code": "class RoadGraphWesternUSA:\n    def time_remove_nodes_from(self, _):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_remove_nodes_from", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d5115c6d8555ca457a6448b1b7ef9276737ffc97919b4c0ab1831585dede2467", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time___len__": {"code": "class TwoDimensionDynamicSimulation:\n    def time___len__(self):\n        len(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time___len__", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e74e8c6882db5809b129e56c69fcd18c923f7e6297beb6f40175b0f5cfb8b363", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_get_node_data": {"code": "class TwoDimensionDynamicSimulation:\n    def time_get_node_data(self):\n        self.graph.get_node_data(5210)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_get_node_data", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "506ae41270bd162724d9422ecc1b855cc370b5630589c1a505393fde912b4150", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes": {"code": "class TwoDimensionDynamicSimulation:\n    def time_nodes(self):\n        self.graph.nodes()\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9f15541b8c8cfd494b635aa1e913c31087d63cf659e08480da32986286281a6b", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes_indexes": {"code": "class TwoDimensionDynamicSimulation:\n    def time_nodes_indexes(self):\n        self.graph.node_indexes()\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes_indexes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "14a36e6308d65477d3348db280a52d1277cf3d77ff05efe52d59a19eba3cd77d", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_node": {"code": "class TwoDimensionDynamicSimulation:\n    def time_remove_node(self):\n        self.graph.remove_node(425)\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_node", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c301c14eceb77f47c2b8597c30807e284322797e91ab04bc2ee54a74fd3be8d7", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_nodes_from": {"code": "class TwoDimensionDynamicSimulation:\n    def time_remove_nodes_from(self):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self):\n        metis_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                  'graphs', \"hugetric-00020.graph.bz2\")\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_nodes_from", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "feeb0ddf6cc829bbe5e5686e5cc7ec736d961cb3e075e3c1a65a208a5b0c2c39", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time___len__": {"code": "class USANYCRoadGraph:\n    def time___len__(self, _):\n        len(self.graph)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time___len__", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "86af794caeb04c3495f379a2eb3807dee161b3ca2ef6aa24d8f640fe7068b7e3", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_get_node_data": {"code": "class USANYCRoadGraph:\n    def time_get_node_data(self, _):\n        self.graph.get_node_data(5210)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_get_node_data", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6faf037c8b7a3ee5e122b4edb921469f62497db2344b774aa794c78ed1b8ca22", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_nodes": {"code": "class USANYCRoadGraph:\n    def time_nodes(self, _):\n        self.graph.nodes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_nodes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "34d3b7fd6fdbb650153ff144eb343977faccf264deb9f659e05d26c1a43098e0", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_nodes_indexes": {"code": "class USANYCRoadGraph:\n    def time_nodes_indexes(self, _):\n        self.graph.node_indexes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_nodes_indexes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ccdfae063cc6f6046e758fe3a6336da36803c804f0742eaff982b8b3318de8a7", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_remove_node": {"code": "class USANYCRoadGraph:\n    def time_remove_node(self, _):\n        self.graph.remove_node(425)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_remove_node", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "72b752c9de1fdaca04612305c3b2b74ce08628039cc48d881501840a4505c613", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_remove_nodes_from": {"code": "class USANYCRoadGraph:\n    def time_remove_nodes_from(self, _):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_remove_nodes_from", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e3391d6c7dc53b0c0bfda8624a6c3c82c2139aa214ff9cfe18daafbfb3a07361", "warmup_time": -1}, "paths.PathFunctionBenchmarks.time_all_simple_paths": {"code": "class PathFunctionBenchmarks:\n    def time_all_simple_paths(self, num_nodes, __):\n        self.all_simple_paths_func(self.graph, 1, num_nodes - 2)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42 * num_nodes)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)\n        if hasattr(retworkx, 'dag_all_simple_paths'):\n            self.all_simple_paths_func = retworkx.dag_all_simple_paths\n        elif hasattr(retworkx, 'digraph_all_simple_paths'):\n            self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n        else:\n            self.all_simple_paths_func = None", "min_run_count": 2, "name": "paths.PathFunctionBenchmarks.time_all_simple_paths", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bfbdacefb5e0b6cb9f0dd64e2ca06c512ba875f56e6bdef151367ca54eacaa0c", "warmup_time": -1}, "paths.PathFunctionBenchmarks.time_dag_longest_path": {"code": "class PathFunctionBenchmarks:\n    def time_dag_longest_path(self, _, __):\n        retworkx.dag_longest_path(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42 * num_nodes)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)\n        if hasattr(retworkx, 'dag_all_simple_paths'):\n            self.all_simple_paths_func = retworkx.dag_all_simple_paths\n        elif hasattr(retworkx, 'digraph_all_simple_paths'):\n            self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n        else:\n            self.all_simple_paths_func = None", "min_run_count": 2, "name": "paths.PathFunctionBenchmarks.time_dag_longest_path", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7d8b2a6e64cbb8070ee34d1fc567d2d9838f7d85c3f558c4c9a59f49e52349c5", "warmup_time": -1}, "paths.PathFunctionBenchmarks.time_dag_longest_path_length": {"code": "class PathFunctionBenchmarks:\n    def time_dag_longest_path_length(self, _, __):\n        retworkx.dag_longest_path_length(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42 * num_nodes)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)\n        if hasattr(retworkx, 'dag_all_simple_paths'):\n            self.all_simple_paths_func = retworkx.dag_all_simple_paths\n        elif hasattr(retworkx, 'digraph_all_simple_paths'):\n            self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n        else:\n            self.all_simple_paths_func = None", "min_run_count": 2, "name": "paths.PathFunctionBenchmarks.time_dag_longest_path_length", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "512d8ec880fe50cae7fa3d8af4a5c0a5ee0e9b3487b641533c91a67c50a6f190", "warmup_time": -1}, "paths.PathsRoadGraphFullUSA.time_astar_shortest_path": {"code": "class PathsRoadGraphFullUSA:\n    def time_astar_shortest_path(self, _):\n        def match_goal(x):\n            return x == 5123\n    \n        self.astar_func(self.graph, 0, match_goal, lambda x: int(x),\n                        lambda x: 1)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)\n        if directed:\n            if hasattr(retworkx, 'dag_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.dag_all_simple_paths\n                self.astar_func = retworkx.dag_astar_shortest_path\n            elif hasattr(retworkx, 'digraph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n                self.astar_func = retworkx.digraph_astar_shortest_path\n            else:\n                raise NotImplementedError\n        else:\n            if hasattr(retworkx, 'graph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.graph_all_simple_paths\n                self.astar_func = retworkx.graph_astar_shortest_path\n            else:\n                raise NotImplementedError", "min_run_count": 2, "name": "paths.PathsRoadGraphFullUSA.time_astar_shortest_path", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "270d3a2bf3472d73be664001e42980c50c940505d1847fc8dbb46aa7f17780a6", "warmup_time": -1}, "paths.PathsRoadGraphWesternUSA.time_astar_shortest_path": {"code": "class PathsRoadGraphWesternUSA:\n    def time_astar_shortest_path(self, _):\n        def match_goal(x):\n            return x == 5123\n    \n        self.astar_func(self.graph, 0, match_goal, lambda x: int(x),\n                        lambda x: 1)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)\n        if directed:\n            if hasattr(retworkx, 'dag_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.dag_all_simple_paths\n                self.astar_func = retworkx.dag_astar_shortest_path\n            elif hasattr(retworkx, 'digraph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n                self.astar_func = retworkx.digraph_astar_shortest_path\n            else:\n                raise NotImplementedError\n        else:\n            if hasattr(retworkx, 'graph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.graph_all_simple_paths\n                self.astar_func = retworkx.graph_astar_shortest_path\n            else:\n                raise NotImplementedError", "min_run_count": 2, "name": "paths.PathsRoadGraphWesternUSA.time_astar_shortest_path", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "14161dfec9e1c68f708293050e0f63613ddfa475641c5ffb3666881dba8e437c", "warmup_time": -1}, "paths.PathsUSANYCRoadGraph.time_all_simple_paths": {"code": "class PathsUSANYCRoadGraph:\n    def time_all_simple_paths(self, _):\n        # NOTE: this doesn't really traverse the graph, a full traversal is\n        # too slow (for now) for a graph this large and takes over 10mins\n        self.all_simple_paths_func(self.graph, 1, 0)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)\n        if directed:\n            if hasattr(retworkx, 'dag_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.dag_all_simple_paths\n                self.astar_func = retworkx.dag_astar_shortest_path\n            elif hasattr(retworkx, 'digraph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n                self.astar_func = retworkx.digraph_astar_shortest_path\n            else:\n                raise NotImplementedError\n        else:\n            if hasattr(retworkx, 'graph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.graph_all_simple_paths\n                self.astar_func = retworkx.graph_astar_shortest_path\n            else:\n                raise NotImplementedError", "min_run_count": 2, "name": "paths.PathsUSANYCRoadGraph.time_all_simple_paths", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ccc77562fe5bab9bb0a04a2c028163a4f53da4de71d7a848a65d4b6126e005f4", "warmup_time": -1}, "paths.PathsUSANYCRoadGraph.time_astar_shortest_path": {"code": "class PathsUSANYCRoadGraph:\n    def time_astar_shortest_path(self, _):\n        def match_goal(x):\n            return x == 5123\n    \n        self.astar_func(self.graph, 0, match_goal, lambda x: int(x),\n                        lambda x: 1)\n\n    def setup(self, directed):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=directed)\n        if directed:\n            if hasattr(retworkx, 'dag_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.dag_all_simple_paths\n                self.astar_func = retworkx.dag_astar_shortest_path\n            elif hasattr(retworkx, 'digraph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n                self.astar_func = retworkx.digraph_astar_shortest_path\n            else:\n                raise NotImplementedError\n        else:\n            if hasattr(retworkx, 'graph_all_simple_paths'):\n                self.all_simple_paths_func = retworkx.graph_all_simple_paths\n                self.astar_func = retworkx.graph_astar_shortest_path\n            else:\n                raise NotImplementedError", "min_run_count": 2, "name": "paths.PathsUSANYCRoadGraph.time_astar_shortest_path", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d29ef0eb3dbfca4c907a210e70cd5f29880af89c2692d237a791e91d7177e798", "warmup_time": -1}, "paths.TestAstar.time_astar_shortest_path": {"code": "class TestAstar:\n    def time_astar_shortest_path(self, num_nodes, __):\n        def match_goal(x):\n            return x == 1\n    \n        self.astar_func(\n                self.graph, 0, match_goal, lambda x: x,\n                lambda x: 1)\n\n    def setup(self, num_nodes, num_edges):\n        if hasattr(retworkx, 'dag_astar_shortest_path'):\n            self.astar_func = retworkx.dag_astar_shortest_path\n        else:\n            self.astar_func = retworkx.digraph_astar_shortest_path\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)", "min_run_count": 2, "name": "paths.TestAstar.time_astar_shortest_path", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a59c86fd6b95040e68b75d75115e8f29b455d5d750cce41f4d4daedb2ff3ba38", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_ancestors": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_ancestors(self, _, __):\n        retworkx.ancestors(self.graph, self.nodes[self.end_edge_index])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_ancestors", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d9d0fcdad0e5a44641480a71fc561e6e64ddfb19dcbd119df1c333f77ec715bc", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_bfs_successors": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_bfs_successors(self, _, __):\n        retworkx.bfs_successors(self.graph, self.nodes[0])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_bfs_successors", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2e9664f87e5aaf385c897a0fbb42cad56d9775146d461fc39e90e2c5e8af4e16", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_descendants": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_descendants(self, _, __):\n        retworkx.descendants(self.graph, self.nodes[0])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_descendants", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5c89afcfc2262068960e3b0c3bf7ba523a31864c242365d116b7ac379f896692", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_number_weakly_connected_components(self, _, __):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_number_weakly_connected_components", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6cfbe3be305fa72dd091d625ab79d2d69ba7cf7ed15575da2622275b7dd6147d", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_predecessors": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_predecessors(self, _, __):\n        self.graph.predecessors(self.nodes[self.end_edge_index])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_predecessors", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e494d992ebd497c685c3fb81eee5d9adfed135758e47953fac6eede2a8e154b1", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_strongly_connected_components": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_strongly_connected_components(self, _, __):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_strongly_connected_components", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "79e7f70bd6f82fbc1ae00caa14e39c100f1989fe2c4a88172320bcb9655d798e", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorBenchmarks.time_successors": {"code": "class PredecessorsSuccessorBenchmarks:\n    def time_successors(self, _, __):\n        self.graph.successors(self.nodes[0])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyDAG()\n        self.nodes = []\n        for i in range(num_nodes):\n            self.nodes.append(self.graph.add_node(i))\n        node_ids = itertools.cycle(self.nodes)\n        for i in range(num_edges):\n            self.graph.add_edge(next(node_ids), next(node_ids), i)\n        if num_edges <= num_nodes:\n            self.end_edge_index = num_edges - 1\n        else:\n            self.end_edge_index = num_nodes - 1", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorBenchmarks.time_successors", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "56474f53c024936585311171e85138978c3c711223057a1705c376a8d319661f", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_ancestors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_ancestors(self):\n        retworkx.ancestors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_ancestors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "3a4aea49bb787420c2fc2832fd45614c11e642610709e5f1cbbbd8de2c29e73b", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_bfs_successors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_bfs_successors(self):\n        retworkx.bfs_successors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_bfs_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "b853628f85c04771ac940a6b84ee3c76e7d68519bcd39f652708277ab662121d", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_descendants": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_descendants(self):\n        retworkx.descendants(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_descendants", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "31a0fe5c48aee7029a37a22d36753338cf9eb1150d605bda0c686ae3c5c3f46d", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_number_weakly_connected_components(self):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_number_weakly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "ad19a0b8191a102a78fe5ce841e0f9890a61c6fd528ef78654da23940330f495", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_predecessors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_predecessors(self):\n        self.graph.predecessors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_predecessors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "8e170f0b41f6eef33efeccc045e23a5a95cbf211a1b36dbd6989943a21de6c4d", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_strongly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_strongly_connected_components(self):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_strongly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "cb0e5c0f46413bc830fc4abed77961b1095b0a88371c4f71a77a2665df82498f", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_successors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_successors(self):\n        self.graph.successors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.USA.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "4b6935a967d51899adbdaf6edc067e436eb436f216f3eba61b248a318c1fb173", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_ancestors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_ancestors(self):\n        retworkx.ancestors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_ancestors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4c33c6db098808f70a0ae1b39df12dc2e17112f2f95dadbb1740c29933b06234", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_bfs_successors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_bfs_successors(self):\n        retworkx.bfs_successors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_bfs_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9ae1f80f30f14a22282f85247f99d4c7a6111abe3087420094c5468788c2345b", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_descendants": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_descendants(self):\n        retworkx.descendants(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_descendants", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "089dec95c5d8c7be3027f96aa79c7b48aaff4657c39b7f0863ee0a13ce857501", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_number_weakly_connected_components(self):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_number_weakly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "47875cec15a5414755df81acc713fe5df8d36f84221b7687410b7604f76684c6", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_predecessors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_predecessors(self):\n        self.graph.predecessors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_predecessors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6aad3381dffee7104adf1b119a5f33c029dc0e6f957a64b9ab0e94dd5d251a28", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_strongly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_strongly_connected_components(self):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_strongly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "88f8567b3a0dcd7514bab6113a1ad302cee2418a6c6227d3d236d0f255bbb4bf", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_successors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_successors(self):\n        self.graph.successors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-t.W.gr.gz\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c8433f5e4c375814037ba2f8bd4fbaaae18f19923cbbdd7a614f45d3e633cb0a", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_ancestors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_ancestors(self):\n        retworkx.ancestors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_ancestors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f72ab7f035b881fcaefef195f9b78e0d4793afdc256cfdf5de081da1adcef92d", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_bfs_successors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_bfs_successors(self):\n        retworkx.bfs_successors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_bfs_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9348950c30ff7ec5f9ced86f3279c590a6411c1767c90442bc545c2be11695f6", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_descendants": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_descendants(self):\n        retworkx.descendants(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_descendants", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8d4b8a2c23672026c1458f0d5e48b6e4aade8070091ae6d4067d7ef5cbee5ad0", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_number_weakly_connected_components(self):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_number_weakly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "54db428f4fbe99b8767289532cd691947985a98f64f8368ecf0b2b1165607de3", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_predecessors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_predecessors(self):\n        self.graph.predecessors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_predecessors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "32a0216bf6e104352e99de2f3c3bcc10dfbaaea8f2ee4cb30a3ca8154e3e42c7", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_strongly_connected_components": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_strongly_connected_components(self):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_strongly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "93cf7ee175d56ced375c43e85fcfe87bb94b357c470d8ba00dd4d6a536f7ba6b", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_successors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_successors(self):\n        self.graph.successors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                               'graphs', \"USA-road-d.NY.gr\")\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d0d0eca36e5ab08d65d4231364f44889c3faae0059f29e29ef3e80b1f35bd5e4", "warmup_time": -1}, "qiskit_terra.QiskitTranspilerBenchmarks.peakmem_transpile": {"code": "class QiskitTranspilerBenchmarks:\n    def peakmem_transpile(self, level):\n        transpile(self.circuit, backend=self.backend, seed_transpiler=4242,\n                  optimization_level=level)\n\n    def setup(self, _):\n        self.backend = FakeRochester()\n        self.circuit = QuantumVolume(53, seed=42)\n        self.circuit.measure_all()", "name": "qiskit_terra.QiskitTranspilerBenchmarks.peakmem_transpile", "param_names": ["transpiler optimization level"], "params": [["0", "1", "2", "3"]], "timeout": 240, "type": "peakmemory", "unit": "bytes", "version": "0.15.1"}, "qiskit_terra.QiskitTranspilerBenchmarks.time_transpile": {"code": "class QiskitTranspilerBenchmarks:\n    def time_transpile(self, level):\n        transpile(self.circuit, backend=self.backend, seed_transpiler=4242,\n                  optimization_level=level)\n\n    def setup(self, _):\n        self.backend = FakeRochester()\n        self.circuit = QuantumVolume(53, seed=42)\n        self.circuit.measure_all()", "min_run_count": 2, "name": "qiskit_terra.QiskitTranspilerBenchmarks.time_transpile", "number": 0, "param_names": ["transpiler optimization level"], "params": [["0", "1", "2", "3"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 240, "type": "time", "unit": "seconds", "version": "0.15.1", "warmup_time": -1}, "toplogical_sort.TopologicalSortBenchmarks.time_lexicographical_topological_sort": {"code": "class TopologicalSortBenchmarks:\n    def time_lexicographical_topological_sort(self, _, __):\n        retworkx.lexicographical_topological_sort(self.graph, lambda x: str(x))\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        list_obj = []\n        for i in range(num_edges):\n            list_obj.append((next(node_ids), next(node_ids), i))\n        self.graph.add_edges_from(list_obj)", "min_run_count": 2, "name": "toplogical_sort.TopologicalSortBenchmarks.time_lexicographical_topological_sort", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d9629920364481bee612b3c0518b98da8210b5fd36c0da2eab938d55d3a94ba9", "warmup_time": -1}, "toplogical_sort.TopologicalSortBenchmarks.time_topological_sort": {"code": "class TopologicalSortBenchmarks:\n    def time_topological_sort(self, _, __):\n        retworkx.topological_sort(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        list_obj = []\n        for i in range(num_edges):\n            list_obj.append((next(node_ids), next(node_ids), i))\n        self.graph.add_edges_from(list_obj)", "min_run_count": 2, "name": "toplogical_sort.TopologicalSortBenchmarks.time_topological_sort", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "38a5cb9abdc176a0929096b400ec1a2dfcd1d09d2884eed3121bca306fc2c206", "warmup_time": -1}}, "machines": {"zeong": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6900K CPU @ 4.20GHz", "machine": "zeong", "os": "Linux 4.18.3-arch1-1-ARCH", "ram": "128GB", "version": 1}}, "tags": {"0.0.1": 28, "0.0.10": 91, "0.0.2": 40, "0.0.3": 46, "0.0.4": 61, "0.0.5": 62, "0.0.6": 78, "0.0.7": 81, "0.0.8": 86, "0.0.9": 88, "0.1.0": 107, "0.1.1": 123, "0.2.0": 156, "0.3.0": 176, "0.3.1": 185, "0.3.2": 192, "0.3.3": 214, "0.3.4": 269, "0.4.0": 449, "0.5.0": 682, "0.6.0": 920, "0.7.0": 991, "0.7.1": 995, "0.7.2": 1013, "0.8.0": 1252}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}