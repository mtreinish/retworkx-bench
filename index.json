{"project": "retworkx", "project_url": "https://github.com/Qiskit/retworkx", "show_commit_url": "http://github.com/Qiskit/retworkx/commit/", "hash_length": 8, "revision_to_hash": {"28": "1cb22074dc853507ad442961f3614e68b4c57938", "40": "56cc3543d7ec2832149dc889327c3c09926dddec", "46": "0ef3793353ce2616d693a34b4749466a618554d5", "61": "aed5c5c3369d65ff86fc7a6e4c7aab8a3a202234", "62": "7f8f2ac9dd872ad05bcecc5f95000fa59a7ea212", "78": "619b2a06bebd77cbc2093de59a6e3c3845c7494f", "81": "c24eb54f315fa09678c53da2762d5d4a104afb1a", "86": "0da6f413e9178afb6e68c5416ebfe7f8f4cbc16a", "88": "302d3b62b348b3658a55f07503a9970ee3e51a7a", "91": "ae48dc30b579bfc694f3b2aa198d87fba3eeb8e0", "107": "29418f7cd5ab392ebea2b0f22b07d657a1a9a70d", "123": "308202349867831a16c2df739edde7fd25ef26a2", "156": "7d2c1840aba57814fe91bc8f3392f9bdd1ee0b9f", "176": "030010d2509e6cb8220f0a90cfea624e2dd898b9", "185": "28994db3f1b9b0c4406dc10e782690bf35b64387", "192": "6666adf16a4c36519de6c3cc2dac8ea44f37609e", "214": "7c9ffa4be0df25ffb99e6420a94fecb2b52b8f0a", "269": "6afe29b8347e0bbcbd2b8de7bc67e2f79e1212df", "449": "7d889f9a9e172214f0e5380acbe467cccd7a6b7b", "682": "547c30b3d4f831e4f92a4ac7867f8f47ee7f19be", "686": "4116d1aeb43a9c40493b4d74ffffec61baba25ab", "690": "10603ce3aaf4117d317d87a39d68a2808beaefec", "696": "ca8e214ca0dc57904b3741bcc6612090ef8dfeb1", "699": "51ad54345dcdb12c86170b5a429c8d4d03eed66b", "701": "f9b391d6a9e591e4dbeddfdb0a95b332c39915f6", "710": "29e76fdf0c0ffb564cb9747d5124e331d5322776", "716": "c3543a892611243008c9977394d139c759bb4db4", "723": "97e57620de665fa90d52d4d55b1e9164eda122cd", "732": "1a612fb051208c763cec7905e34292cff18d3766", "741": "9487df8e88b8920e7b7c11f4a12e27e2eb1b2faa", "743": "9208d0c460878bb9e3c36a62a3597a195a67de8e", "761": "1b0ab326966ce1be1cb0aef9a2430b127539eae3", "768": "4d66ef43b57f6038f1084fb78141267505744173", "775": "7db288cf9c478391b0b55d0f154d6040ffc2bf7b", "778": "ba6f6e1080c502adced9bdcabf94da88da1e5f20", "781": "b92db69724e23e855e714bc3bbe445eaf3138a68", "788": "fff0fae5ae920314eea783806cf71595492069de", "792": "9c4ecf5abc9449925d1b411dc8a6595c8977ef99", "797": "98523832e36161ad4fa85a7f73d1aa7a04427a8c", "799": "b25d7ad4309b80c914e64ab9b4ab9829889309ef", "809": "59fb79d2e1fad704e5a61b3d12d018c3db73ffd2", "815": "db0b016ca0fbb7cdcc8efea7e2b63bf5fb1e2568", "819": "60e72d3ca1c7f4c88083230e155e155c27b06256", "827": "15534ac437abb834dc522bf37be24dd4fedbbe11", "834": "12eb6c33ac8a28e37fb3b24b134313bcfc70b884", "837": "bbf0f0c3b63779a8dda49981283ba7dc307cbe24", "845": "83e3b8597e230b7dedbf1a6179d992fd425c1a24", "857": "a0a809d945b42214314595537af79d7f4b95b462", "859": "f0d5254bdeaf4a5bdc24c738f8f66721ee680af4", "870": "f35becf5cddf7f7344e3b456544a8a3dda1a88f5", "874": "d8bd4705c8ece273fb185ff34f53506871e14e59", "876": "54cc35c53e7050a25dd57ad2e9233a7f60cbf178", "886": "b790a86b0cf7644b94e1a3f9e2ed79cd52a94d20", "900": "0ef76fe2624a2587b701eccf0684797f14400e0f", "902": "009c625177885b0d8444c0002de37ad635f47bd2", "908": "5a4f906ec5a098af56229b24969acc130b82ba73", "920": "635bf2e94a21436fd75095b9ef57de735ad50907", "931": "d6ee63dc4d29742d8b4545fce14f0314dd2332c1", "933": "bca91c60a686c46c0cd5a0649a54aa4773df1b80", "935": "05ecef01cf8661bc6dfb8836e06c4fbd1a112dba", "937": "beda066ac2080ed75b6b4982e097b7e772e3277e", "945": "fdff46a60606618f38fb8e9981643894070600a5", "947": "0b19f2383fd40ff9a0d9a8e415e80e36b0d872d8", "951": "4a71b5d299b0610f8729ab3f6752b92c4a290ad1", "955": "b6ecea56b5413b9fdb6222d730166f5b04d94d91", "957": "857947d971072c39ea89d0ab47092c4837fdca71", "961": "174a54a806a892b7c669bfd123ed56bde46e1931", "964": "affc57cbde630dc956f7d51a0b9c1b2df880a031", "976": "a06d578c69c0976d172db6bb39673a853129a854", "985": "c97afd24514c0b99a2008a9f57adc227a73e3b7c", "987": "6782e55b91a2bb67f1b264ec31ae539830f136a5", "991": "d28926047c7aa3b2bf28636609679b91ad44d486", "995": "0ce32e0066dd743e92b4a45f651fcb7eaeb0df76", "1006": "27e22547f3ad016568d67b9d640c93c3c9f36aa0", "1008": "7ebd64b19e79e7b6e91a1a2e2d9dedb6cbc88184", "1010": "d735c76ab46cc3a57e9070d6165d21a660fdc09b", "1013": "1b2abd78c4916942334264bec2cd46dea529402c", "1020": "8c420de4c0b2ee6e6916525ed190dd1af7218719", "1022": "75ffd0dfecdc0eed971038e0ceaeca7b1f9ae792", "1024": "7602a7b54c6e725c269e293b8fbc80e247013c2d", "1033": "a3249f0825028c1799984547e9c62bcd2cef89ab", "1048": "dd220ea5f2d72c9b92ff243efeab8bdb2ee52517", "1052": "60b6e25d4e387ab284426073541e64fe780e5ba0", "1063": "36d97600e050be8375848569dc1b17e67c7b9862", "1067": "0cd27690269945c5df80ed3a333c6227572b2ecd", "1075": "fad532091c2ff5bd8e64b85e637ad4abdf0f0f85", "1096": "6ee3dfd5c4ce7d27490daedabc579cdae50efe13", "1108": "0e42ab043f90fe9eb72f7a658e1907ce1bdc7247", "1116": "2026e7d12ec3799cad4dc7c507c2367cb6fab3f4", "1133": "9d8d505acb48a97a75595602fa9ac7c80661d687", "1135": "f908abb98d210eafcac0cff8e3b8b7da22f0457b", "1138": "00c9584753fdf9e59c76d7287a67b6288f5562f6", "1141": "8d2fdcc777f383bce16d6104e0dcf5cbdc7d6b92", "1151": "e73c2949df074cd7bd25ce7b2177722889c796f6", "1161": "8c7a7433cd7f27b10fecfaba1307032229307864", "1165": "49727f82c4d93ea8dfd76c69a2751173af38501e", "1176": "dc359f7e023b1287c0d2d1c21fdf5f5e23dc6eb1", "1178": "bbcb0d55c1dbb0c575b1be3a29a9594e3bb68a14", "1191": "69bd097ec0113348fc21651771075c4fa1ce584d", "1199": "7e889b27a4822df16c70238c5b476bbf2764e97f", "1206": "bc9a18a7565d92f6972d1db66244b01f46d08e95", "1215": "dbbec6f825bdec1ed2c8df3a5e77fb304f13d4ac", "1227": "fda4b52b814882035afa39e82549e3228150a548", "1234": "d7e37bd1e2714d5c3346e81841a3ab0f15acd9ad", "1247": "cca09932b3ae424fbf32871bb8d311ca02f206a0", "1249": "84536a9de40e9ca42965a35a0f95a0f5fb1b16bf", "1252": "3537af5b39fa918d7229fe9b0ed6c9e2aaaee43f", "1266": "b1f973630cb352950fbdeabd4b4c60191a62a6e7", "1272": "d00d6884582a419b296aace27f29cfb71111337d", "1280": "65876db89d8156fbaf65659ca8ac498bfcca3663", "1285": "10faa831269351bfd4e92d806431f859d1668ddd", "1315": "f0ad15fa7e85aad73e0c2e352ec07172333571b5", "1330": "11abe0141ac08b03eef73d0e7c3748c447435c0e", "1333": "28a93b34a337e9248f6a01c7611c67d9aaa12493", "1373": "8d65d7085088c5e9221bbd96e21e75ebd62d0470", "1436": "356e043385c5a2b8f12e898264dfc817cafb2195", "1450": "37214db365427dc7f04dbf2e6dd10c51e3ef4807", "1453": "34a2cb01894ba1ab8438ca585ed0df3f280cce90", "1485": "aa5a25cdbf1ff5cac06ed1ac04c5ca9f580ecbbb", "1496": "963704b93aa6d4b0fdfa8d808a663a34a460ed9b", "1508": "b26e4bd6e1a561e39bed899fe9facbb40813a081", "1520": "bb6b48778d46ee33856e46b79a56647a008bd4db", "1523": "77ebc4017af95c7e9bb4ac0a063a83cdd4222ab8", "1555": "db8443af135c4ab35cb20cf74e2f29318dd1fa10", "1575": "d267449c22bb16d3e36c4892b00429e369418041", "1588": "693faebbb25e5632cec74a6fc914c662523b96dd", "1612": "f9f0b158591bdeff232dedca66818bda903804cd", "1621": "4c9bf613483ae374e7ebbc0a0df0412d167c4c9f", "1632": "d89e57c9231b62d3f7213966d1b03c124767e0e8", "1642": "00987a516469169071e00dacc10eee798341e70f", "1652": "e940fd5406aa27eff7e66bce14249894c388fef6", "1654": "9f6b705ba258da4b7c9a2c5a9d71f52291196e87", "1656": "66eb27f992cc573b817fb7ee6b69f6e135324849", "1678": "8efe47c8ffaa2bdf1730ad50ada389bf9ca15229", "1708": "d13c0b80a28570be4bf3e7d66e29fadae21552fe", "1713": "d052f77c013a0d23f5be7a5a4db6c537beb814ac", "1737": "042adfd61c4ee8b20f3764d0e0954047ea9c1e17", "1747": "c3cafd2b95a57980aea5945953a045e258301efc", "1752": "596c52d58cb24bd6d868cca0a752815a90c264d6", "1755": "79c38f2df977e1d6c431f364d9a1ebb33bb3d140", "1757": "4ef9ed956aa62263fd76780944af12ad405cc1c9", "1776": "cc571eb816884a22502152c1f0c1e31a7e3af8e3", "1780": "8b86b7345320711233586a4cab5309b734c2efc7", "1782": "580bc1bc7b3646b427bb4b6bd6ed7aebd277ddf6", "1787": "6802761b0627d0aee4016bde602490c027f1e20b", "1791": "223bb32b0a57349d4ef1208a4d7ee49a474fbfbb", "1810": "409d74e6d98e31a537af68701097bc3dcbcb0932", "1812": "e35e43bd1148a8d9975e52cf968b76c81dd92b99", "1814": "860ff556c58fbbe838863db78028b4009eae23c5", "1819": "b65dfe6b383ac792899e51982737cd918ffb65f0", "1820": "00834bf3671098ef7cb82a72514b00fc79ceee40", "1822": "ad3454131e266f2aae19b5ecd16e70168067119f", "1832": "187d819df38fc15e4ed274c5538308321b4a848e", "1838": "29666925b04a1c14cad96dd2cf1b53d3f2ece35c", "1841": "8473d6d2e190ba698085fd6cbb389bc4b203b368", "1845": "09958e7b60d15e2aa6bc2e0dd7010a8073c6be88", "1851": "252adeef9dc0e243fd64e0408e3974af657f742a", "1853": "885f2de1588dc983591563f94b2ddcada443b3b2", "1868": "e81517f504e5dbe4ac7e185410e193dfb8ec43c5", "1880": "6f20a461a82f021d8e27b23121f01da5dcbe6c85", "1887": "403dcbc21fe93bd261bb6a4b9b8b367873192b53", "1890": "aad90f77f15912eb5b534467e3346a4781987c4e", "1897": "ab1f98425e7a06ab111c8fe3b404b1bf53b4b2d4", "1901": "30c11151001e3306e1ad89081836451534184a7a", "1923": "010e0de6b8b475843df8aba511fc5731e386fa01", "1974": "1ee6506c2233ecb76d3a85f899ca8bb8facaf758", "1985": "7c3d20f533266135a98c171892c538c04e6bf2d2", "1987": "e5d9f93bd90dc42354f8b12a72519311253becbe", "1994": "597ad5e0a1d811cdcc1425efc5fc8dd0e633bf9a", "1997": "e2f2f093aac61a3cae3fcf49b3300fcec6536989", "1999": "17af3379d7a9f04a85499b980a2816c97d348c5d", "2005": "4364fcb51bb2262100a946cb649604cb44d281f5", "2016": "3c7c28268605f75c30251ad8b4e2b88544bbd1f3", "2030": "3e7508ab27831b505b36a8cd5efd356fc4abdf15", "2042": "bd74316396ffdcfb7647b7dcfd15da9a5e31d3f0", "2048": "83b5e444cf54a6a604629b5bfdafde89fd492bd7", "2052": "c831e35c005abd83aadca1fb542b769278ab266e", "2060": "6a7a1eb4e510744173aa08d46a45bfc9352631b2", "2091": "70d45ccf9631a39026e1859dc57840bd47ee775d", "2094": "0252b5093930377e71104e4369b7318d23e7405b", "2096": "f62b83d50ec863b50bfbdf8a1c55870f5bb874f7", "2102": "a7461b6a4b2e73aa39d3c7fb79145cab2fa52937", "2104": "96835d3cf28aa305e18376130faf3a3fcbc06ddf", "2112": "cb568ee17760efe646bf008e148575c674ae7154", "2135": "a9d30bfa3762ace389a523c20776740ee5d6ebda", "2137": "9f24a937e957f5ce1189b04f5c25234b80c8c0fe", "2154": "56fd53d0c7842a7b08eb94ebb9fe26f995e82742", "2157": "3bc5d80db1dcf50be340fc5806d6ec4a8becf495", "2159": "218b2ae2f908a9d4ba7279d6d65f564276251862", "2219": "0e9feb0e3efdc4d3046b3ed6b12b67178e7e53eb", "2221": "fe51f07d3133e13b11c7a45a97392607ccce5938", "2232": "54f30522776fce50758feed6503d08ef17b3b6de", "2267": "4b0aafa0dca2dd4e2688ac3f676cfe609b141e6f", "2269": "0919144adf37ddc054af5db8e94c02a7edfcf34e", "2293": "2f74f7ff63e3077cf4217b2472ec1e0204aa39ab", "2304": "88af109caf6b646f9cb71f5a0bff87c4b195be7c", "2312": "28aa372d8e8fdee594902b3443599252dcaa3494", "2320": "b528622ed96e820a5644251bf9a35bd180d31f0c", "2325": "fba8d5c18492da71e9bcbaa63f5285a73b682f8c", "2330": "acdc5ed9da287e7f957e35164564bf28489494a7", "2335": "a62528b16d9a05d5bcad4416b8099cbbf52af76a", "2352": "fdfda505c46f5640bae7c9586f7b62b18f653ae5", "2390": "adaeb3137e53e5d51ea96894c26b8d8957bdfe6a", "2392": "05ae8b31ac1229f3edf89620bc25e2f2991f7739", "2410": "c98ce5c26f043ca97a368fdb1cb7f8ef7ac94efa", "2424": "727eaa902e67d4ae0ffc314530b8f671a79e0f1b", "2437": "b83e3db6fea025bd4e34b4d768f203e69455d532", "2449": "37dff26d06586c87465beecdc5943be40106018b", "2467": "77507ceb7bfe7736fdc11d6a717fb6a3926ec181", "2476": "d9d723d2777c69b4ea815971a5a9c44a9bf77cfc", "2484": "23cb73733063e27d4efc155cbcd9fb214203633c", "2486": "81050b700d2900859c5502d3db408cd162ce0a71", "2495": "0267f55df5c42bca3248dc7abd54af21442f4983", "2499": "a71e5bfd647c36a558dac3324e4f01a1db3f6705", "2504": "b97bc143254dccfd076a6e83840aae14930da892", "2512": "06bad5c1fec5a90fa1e3c1a8dcac4cedc9869425", "2515": "c29bd52d95bda2c32e74166c9761c91af224dbac", "2518": "0664944ef405d349f87d54bf56bdb9c1816cf2fc", "2520": "8e22ba75b3529e720f3d26e1b17dc17be3d22009", "2542": "7b2a8ab070004755e06c80812a79dd26c4f32b14", "2545": "f8852114a42d0ac599ab342a2af14245e51f195a", "2551": "9cb795eedcfc932a025410767e43fbdb84bb728f", "2553": "a0e38ef89b1f9975cfd2cf0a2a4be4b14ac9fed1", "2562": "f2f3a098c526211c3fe947efba98398e5691ff5e", "2584": "466b884f60b7413d6dcebd6ab7f56131dc4ee9cb", "2587": "5bced322de3576351206b1cdcf9da8f2ad12fb47", "2589": "2d8634487402bf35433ebc39324fbe37515fd591", "2596": "0a58b856b1395900d62ec1ff76dea02c5b4e4cfc", "2604": "d257f3dce541debed3117cc0959597ce74d395d9", "2615": "747a4f6dad37e1e0495a7425e133dcc54b6cd6b7", "2626": "ad5a401575a345a5c8c860e846a5113f78d7003e", "2635": "ee34719a67721ade1a34ae8bad2a8072e82f5a26"}, "revision_to_date": {"28": 1557594406000, "40": 1557766681000, "46": 1557781437000, "61": 1557845995000, "62": 1557851243000, "78": 1557933573000, "81": 1558034985000, "86": 1558543096000, "88": 1559334124000, "91": 1568842772000, "107": 1580145188000, "123": 1580495782000, "156": 1581367679000, "176": 1582236247000, "185": 1583536541000, "192": 1584112085000, "214": 1584560596000, "269": 1587986404000, "449": 1594986606000, "682": 1600431262000, "686": 1600713541000, "690": 1600816377000, "696": 1601321859000, "699": 1601368916000, "701": 1601460426000, "710": 1601507822000, "716": 1601589723000, "723": 1601645441000, "732": 1601747700000, "741": 1601927496000, "743": 1602006834000, "761": 1602428770000, "768": 1602544744000, "775": 1603030087000, "778": 1603034111000, "781": 1603035249000, "788": 1603118522000, "792": 1603125197000, "797": 1603193462000, "799": 1603194817000, "809": 1603227178000, "815": 1603467576000, "819": 1603734539000, "827": 1603992217000, "834": 1604000027000, "837": 1604319861000, "845": 1604330453000, "857": 1604413749000, "859": 1604414927000, "870": 1604492347000, "874": 1604645749000, "876": 1604663485000, "886": 1604695075000, "900": 1604954753000, "902": 1605010947000, "908": 1605035237000, "920": 1605135316000, "931": 1605285323000, "933": 1605288203000, "935": 1605450093000, "937": 1605453908000, "945": 1605718992000, "947": 1605722088000, "951": 1605801372000, "955": 1605805561000, "957": 1605809647000, "961": 1606150765000, "964": 1606606717000, "976": 1606691595000, "985": 1606941940000, "987": 1606994264000, "991": 1607000650000, "995": 1607028721000, "1006": 1607696197000, "1008": 1607707027000, "1010": 1607714018000, "1013": 1607723669000, "1020": 1609625840000, "1022": 1609626701000, "1024": 1609858545000, "1033": 1610287437000, "1048": 1611167784000, "1052": 1611241214000, "1063": 1611266881000, "1067": 1611268154000, "1075": 1611426100000, "1096": 1611755087000, "1108": 1611773828000, "1116": 1611794374000, "1133": 1612208867000, "1135": 1612211189000, "1138": 1612385652000, "1141": 1612545805000, "1151": 1612902478000, "1161": 1613478660000, "1165": 1613575855000, "1176": 1613945298000, "1178": 1613946669000, "1191": 1614115359000, "1199": 1614259620000, "1206": 1614266960000, "1215": 1614343262000, "1227": 1614366922000, "1234": 1614645664000, "1247": 1614699722000, "1249": 1614702132000, "1252": 1614713795000, "1266": 1614787800000, "1272": 1615232252000, "1280": 1615391345000, "1285": 1615465750000, "1315": 1616008741000, "1330": 1616255301000, "1333": 1616262953000, "1373": 1616688302000, "1436": 1616874430000, "1450": 1617188122000, "1453": 1617198237000, "1485": 1617455008000, "1496": 1617536693000, "1508": 1617626343000, "1520": 1617733219000, "1523": 1617735588000, "1555": 1617908759000, "1575": 1618408581000, "1588": 1618861543000, "1612": 1619264504000, "1621": 1619469251000, "1632": 1619813606000, "1642": 1619981156000, "1652": 1620125868000, "1654": 1620128191000, "1656": 1620131112000, "1678": 1620408226000, "1708": 1621016454000, "1713": 1621283128000, "1737": 1621425074000, "1747": 1621444059000, "1752": 1621445506000, "1755": 1621448754000, "1757": 1621453755000, "1776": 1621606192000, "1780": 1621609768000, "1782": 1621611820000, "1787": 1621617397000, "1791": 1621620056000, "1810": 1621868830000, "1812": 1621868928000, "1814": 1621871823000, "1819": 1621884300000, "1820": 1621885234000, "1822": 1621888628000, "1832": 1622042921000, "1838": 1622110929000, "1841": 1622113284000, "1845": 1622119848000, "1851": 1622149095000, "1853": 1622151305000, "1868": 1622208965000, "1880": 1622225888000, "1887": 1622233080000, "1890": 1622283954000, "1897": 1622481074000, "1901": 1622483645000, "1923": 1622545310000, "1974": 1623664564000, "1985": 1623763414000, "1987": 1623768906000, "1994": 1623839033000, "1997": 1623841032000, "1999": 1623842876000, "2005": 1623951273000, "2016": 1624286901000, "2030": 1624369663000, "2042": 1624533993000, "2048": 1624539609000, "2052": 1624568388000, "2060": 1624648960000, "2091": 1625569248000, "2094": 1625581716000, "2096": 1625584881000, "2102": 1625763607000, "2104": 1625769239000, "2112": 1626317746000, "2135": 1626715225000, "2137": 1626779765000, "2154": 1627062516000, "2157": 1627065749000, "2159": 1627069129000, "2219": 1627481283000, "2221": 1627495338000, "2232": 1627677520000, "2267": 1628088216000, "2269": 1628096227000, "2293": 1628258333000, "2304": 1628278685000, "2312": 1628342214000, "2320": 1628505469000, "2325": 1628515345000, "2330": 1628521357000, "2335": 1628527360000, "2352": 1628678455000, "2390": 1628858837000, "2392": 1628862030000, "2410": 1629145575000, "2424": 1629208567000, "2437": 1629298798000, "2449": 1629363029000, "2467": 1629666314000, "2476": 1629746123000, "2484": 1629757745000, "2486": 1629761154000, "2495": 1629907920000, "2499": 1629915279000, "2504": 1629929280000, "2512": 1630074872000, "2515": 1630235591000, "2518": 1630245923000, "2520": 1630248855000, "2542": 1630664225000, "2545": 1630679580000, "2551": 1630852185000, "2553": 1630855999000, "2562": 1630931419000, "2584": 1631116921000, "2587": 1631121480000, "2589": 1631129577000, "2596": 1631191422000, "2604": 1631281780000, "2615": 1631377535000, "2626": 1631735320000, "2635": 1631886900000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-6900K CPU @ 4.20GHz"], "machine": ["zeong"], "os": ["Linux 4.18.3-arch1-1-ARCH"], "ram": ["128GB"], "python": ["3.8", "3.9"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6900K CPU @ 4.20GHz", "machine": "zeong", "os": "Linux 4.18.3-arch1-1-ARCH", "ram": "128GB", "python": "3.8", "branch": "master"}], "benchmarks": {"adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix": {"code": "class DiGraphAdjacencyMatrixBenchmarks:\n    def peakmem_adjacency_matrix(self, _, __, ___):\n        self.graph_func(self.graph, lambda x: x)\n\n    def setup(self, num_nodes, num_edges, remove_nodes):\n        random.seed(12345)\n        self.graph_func = retworkx.digraph_adjacency_matrix\n        self.graph = retworkx.directed_gnm_random_graph(num_nodes, num_edges, seed=4242)\n        for edge in self.graph.edge_indices():\n            self.graph.update_edge_by_index(edge, random.randint(0, 20000))", "name": "adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix", "param_names": ["Number of Nodes", "Number of Edges", "Removed Nodes"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"], ["False", "True"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "012e1000b180ffa86eef40eb5c282b625480a326b5ce37e84c57c9c12a05040a"}, "adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.time_adjacency_matrix": {"code": "class DiGraphAdjacencyMatrixBenchmarks:\n    def time_adjacency_matrix(self, _, __, ___):\n        self.graph_func(self.graph, lambda x: x)\n\n    def setup(self, num_nodes, num_edges, remove_nodes):\n        random.seed(12345)\n        self.graph_func = retworkx.digraph_adjacency_matrix\n        self.graph = retworkx.directed_gnm_random_graph(num_nodes, num_edges, seed=4242)\n        for edge in self.graph.edge_indices():\n            self.graph.update_edge_by_index(edge, random.randint(0, 20000))", "min_run_count": 2, "name": "adjacency_matrix.DiGraphAdjacencyMatrixBenchmarks.time_adjacency_matrix", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Removed Nodes"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "83493bbffacd01474bf446686bc1a08b700293141342893b501e5090519fab9b", "warmup_time": -1}, "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix": {"code": "class GraphAdjacencyMatrixBenchmarks:\n    def peakmem_adjacency_matrix(self, _, __):\n        retworkx.graph_adjacency_matrix(self.graph, weight_fn=float)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(1234)\n        self.graph = retworkx.undirected_gnm_random_graph(\n            num_nodes, num_edges, seed=4242\n        )\n        for edge in self.graph.edge_indices():\n            self.graph.update_edge_by_index(edge, random.randint(0, 20000))", "name": "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.peakmem_adjacency_matrix", "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "db9989d09c94ab196342c6cbdd6449a01117dabd9a243d7363003870c68389eb"}, "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.time_adjacency_matrix": {"code": "class GraphAdjacencyMatrixBenchmarks:\n    def time_adjacency_matrix(self, _, __):\n        retworkx.graph_adjacency_matrix(self.graph, weight_fn=float)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(1234)\n        self.graph = retworkx.undirected_gnm_random_graph(\n            num_nodes, num_edges, seed=4242\n        )\n        for edge in self.graph.edge_indices():\n            self.graph.update_edge_by_index(edge, random.randint(0, 20000))", "min_run_count": 2, "name": "adjacency_matrix.GraphAdjacencyMatrixBenchmarks.time_adjacency_matrix", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000"], ["10", "100", "1000", "10000", "100000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1f97ee7421a7bc274cb4270737675aaf77e7a8036f8463894938cd2746bb9b92", "warmup_time": -1}, "coloring.ColoringBenchmarks.time_graph_greedy_coloring": {"code": "class ColoringBenchmarks:\n    def time_graph_greedy_coloring(self, _, __):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.undirected_gnm_random_graph(num_nodes, num_edges, seed=42)", "min_run_count": 2, "name": "coloring.ColoringBenchmarks.time_graph_greedy_coloring", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0145724ecb8979f63a4ce22b5ad15b8208e0335814eba84f2e69d43aaddbe091", "warmup_time": -1}, "coloring.ColoringRoadMapAsia.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapAsia:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "name": "coloring.ColoringRoadMapAsia.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "a8f37d22e6b907d0bfafe9b25796fc8e7d176776973104c1f527101aa09184f4"}, "coloring.ColoringRoadMapAsia.time_graph_greedy_coloring": {"code": "class ColoringRoadMapAsia:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "coloring.ColoringRoadMapAsia.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "276613ef90b7b4f7e43745411e79811223f45111ffa13569240c727e9be652df", "warmup_time": -1}, "coloring.ColoringRoadMapFullUSA.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapFullUSA:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "name": "coloring.ColoringRoadMapFullUSA.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "ff00e3056973daf599f9fec6ec2f922ff2eab21063922757e0cc36d77d048090"}, "coloring.ColoringRoadMapFullUSA.time_graph_greedy_coloring": {"code": "class ColoringRoadMapFullUSA:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "min_run_count": 2, "name": "coloring.ColoringRoadMapFullUSA.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "f90f673e31ef19bf7120ede9715ed521264313f329bc342969fc23b301dcf41a", "warmup_time": -1}, "coloring.ColoringRoadMapNYC.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapNYC:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "name": "coloring.ColoringRoadMapNYC.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "1dd3f1702198413eff74b11903a16e650607b9099c5d4f542b049f897ff11ad7"}, "coloring.ColoringRoadMapNYC.time_graph_greedy_coloring": {"code": "class ColoringRoadMapNYC:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "min_run_count": 2, "name": "coloring.ColoringRoadMapNYC.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "015642c13b051f9e8f65dc79fa6d18145e716ef14835c583b321fcbd2b1c2db2", "warmup_time": -1}, "coloring.ColoringRoadMapWesternUSA.peakmem_graph_greedy_coloring": {"code": "class ColoringRoadMapWesternUSA:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "name": "coloring.ColoringRoadMapWesternUSA.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "fd6215a896b2c20bd625478071dcb5192ebe02b960375d79893ae393e230f519"}, "coloring.ColoringRoadMapWesternUSA.time_graph_greedy_coloring": {"code": "class ColoringRoadMapWesternUSA:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=False)", "min_run_count": 2, "name": "coloring.ColoringRoadMapWesternUSA.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9ef106aea06a13525f81e9e8fb0ab717ed6b7826969f49c16f81c05b92f2101f", "warmup_time": -1}, "coloring.RandomGeometricGraph.peakmem_graph_greedy_coloring": {"code": "class RandomGeometricGraph:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "name": "coloring.RandomGeometricGraph.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "2be9afb50946b16c251d808c553e854319d69bbc82fe55a40f5c25627955605a"}, "coloring.RandomGeometricGraph.time_graph_greedy_coloring": {"code": "class RandomGeometricGraph:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "coloring.RandomGeometricGraph.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "b9d97d0b93d36b5f5eaaf062aefccd47f20bed4926c5ef2b77c914d35befe604", "warmup_time": -1}, "coloring.TwoDimensionalDynamicSimulation.peakmem_graph_greedy_coloring": {"code": "class TwoDimensionalDynamicSimulation:\n    def peakmem_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "name": "coloring.TwoDimensionalDynamicSimulation.peakmem_graph_greedy_coloring", "param_names": [], "params": [], "timeout": 120.0, "type": "peakmemory", "unit": "bytes", "version": "e05b8b6effeb4041c3e51fefc2589027155bc98cdd67f09f2296c6ac85b2bcf8"}, "coloring.TwoDimensionalDynamicSimulation.time_graph_greedy_coloring": {"code": "class TwoDimensionalDynamicSimulation:\n    def time_graph_greedy_coloring(self):\n        retworkx.graph_greedy_color(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "coloring.TwoDimensionalDynamicSimulation.time_graph_greedy_coloring", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 120.0, "type": "time", "unit": "seconds", "version": "d58d2805e3c2137ac0fa2f6aff4dd9d9eff5509ea88f38be9cfe14cdc0e21e73", "warmup_time": -1}, "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from": {"code": "class DiGraphAddEdgesBenchmarks:\n    def time_digraph_add_edges_from(self, _, __, ___):\n        self.graph.add_edges_from(self.list_obj)\n\n    def setup(self, num_nodes, num_edges, cycle_check):\n        self.graph = retworkx.PyDAG(cycle_check)\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3722a1a79894283417408a87918f9836a7edb26083224464e8a310b2666817b2", "warmup_time": -1}, "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from_no_data": {"code": "class DiGraphAddEdgesBenchmarks:\n    def time_digraph_add_edges_from_no_data(self, _, __, ___):\n        self.graph.add_edges_from_no_data(self.list_empty)\n\n    def setup(self, num_nodes, num_edges, cycle_check):\n        self.graph = retworkx.PyDAG(cycle_check)\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_from_no_data", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f7eb04d5434d7e018a09ea2c7639e62811e799d6588faa040765d1a56d301e59", "warmup_time": -1}, "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_loop": {"code": "class DiGraphAddEdgesBenchmarks:\n    def time_digraph_add_edges_loop(self, _, __, ___):\n        for i in self.list_obj:\n            self.graph.add_edge(i[0], i[1], i[2])\n\n    def setup(self, num_nodes, num_edges, cycle_check):\n        self.graph = retworkx.PyDAG(cycle_check)\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.DiGraphAddEdgesBenchmarks.time_digraph_add_edges_loop", "number": 0, "param_names": ["Number of Nodes", "Number of Edges", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b6bbd7d930c00f4f8e35ec9299b018af916f3a0ff08f64f47d590e60fad9bf56", "warmup_time": -1}, "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from": {"code": "class GraphAddEdgesBenchmarks:\n    def time_graph_add_edges_from(self, _, __):\n        self.graph.add_edges_from(self.list_obj)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1fbe28be6f85c35b0c08ea2bc25d64504a60ac5d0a099819330dfa772b1ada2", "warmup_time": -1}, "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from_no_data": {"code": "class GraphAddEdgesBenchmarks:\n    def time_graph_add_edges_from_no_data(self, _, __):\n        self.graph.add_edges_from_no_data(self.list_empty)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_from_no_data", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e46e5a44b14b2cbc2c386ed66ba6a25fb367af9f28bf47a69ef7dc5ce60a33c8", "warmup_time": -1}, "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_loop": {"code": "class GraphAddEdgesBenchmarks:\n    def time_graph_add_edges_loop(self, _, __):\n        for i in self.list_obj:\n            self.graph.add_edge(i[0], i[1], i[2])\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.PyGraph()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        self.list_empty = []\n        self.list_obj = []\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            node_a = next(node_ids)\n            node_b = next(node_ids)\n            self.list_empty.append((node_a, node_b))\n            self.list_obj.append((node_a, node_b, i))", "min_run_count": 2, "name": "edge_benchmarks.GraphAddEdgesBenchmarks.time_graph_add_edges_loop", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d9704b1a64ff364a1c0aa55cbde9590edd20d8cd672bf42151e5d1053e3291e0", "warmup_time": -1}, "floyd_warshall.FloydWarshall.peakmem_floyd_warshall": {"code": "class FloydWarshall:\n    def peakmem_floyd_warshall(self, _, __):\n        retworkx.floyd_warshall(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.directed_gnm_random_graph(\n            num_nodes, num_edges, seed=4242423\n        )", "name": "floyd_warshall.FloydWarshall.peakmem_floyd_warshall", "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000"], ["10", "100", "1000", "10000"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "0809d554cf1a05a96f6c5dfddb750942de4bf3dcd5af13f0826d218304c3ae57"}, "floyd_warshall.FloydWarshall.time_floyd_warshall": {"code": "class FloydWarshall:\n    def time_floyd_warshall(self, _, __):\n        retworkx.floyd_warshall(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        self.graph = retworkx.directed_gnm_random_graph(\n            num_nodes, num_edges, seed=4242423\n        )", "min_run_count": 2, "name": "floyd_warshall.FloydWarshall.time_floyd_warshall", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000"], ["10", "100", "1000", "10000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0c359e2c677455937b344fcdffd2f59d70dddfc9fbb6b5a769f40034b3a75ff2", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_dag_creation": {"code": "class RetworkxGraphCreation:\n    def time_dag_creation(self):\n        retworkx.PyDAG()", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_dag_creation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aed6eac30f44886e8e50cbc5d7fdc37bedc9db512eb7bae4137f8d5d7278d614", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_dag_creation_with_cycle_check": {"code": "class RetworkxGraphCreation:\n    def time_dag_creation_with_cycle_check(self):\n        retworkx.PyDAG(check_cycle=True)", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_dag_creation_with_cycle_check", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "204911fe1d9d165e97490d2fbfc51b05a0bedcc0f4e33bcb1484470c5d1ca974", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_digraph_creation": {"code": "class RetworkxGraphCreation:\n    def time_digraph_creation(self):\n        retworkx.PyDiGraph()", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_digraph_creation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2423409d84f2223a07a6f63cda90e2633df04611052ce6283aa67c0a68a8907f", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_digraph_creation_with_cycle_check": {"code": "class RetworkxGraphCreation:\n    def time_digraph_creation_with_cycle_check(self):\n        retworkx.PyDiGraph(check_cycle=True)", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_digraph_creation_with_cycle_check", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ce02379d6f06c8c1a03db97c30bafbfa41cb9675460341bf1d203c90b59c0c25", "warmup_time": -1}, "graph_creation.RetworkxGraphCreation.time_graph_creation": {"code": "class RetworkxGraphCreation:\n    def time_graph_creation(self):\n        retworkx.PyGraph()", "min_run_count": 2, "name": "graph_creation.RetworkxGraphCreation.time_graph_creation", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "93c0bf4ecde08befd82e1e224550672e948f8dedef5ab1e252a462d499c1a027", "warmup_time": -1}, "import.RetworkxImport.time_retworkx_import": {"code": "class RetworkxImport:\n    def time_retworkx_import(self):\n        call((executable, \"-c\", \"import retworkx\"))", "min_run_count": 2, "name": "import.RetworkxImport.time_retworkx_import", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fc56b55b4a6d070f232956430386075e2a623e47edaba11b92e1a1881f9a7165", "warmup_time": -1}, "layers.LayersBenchmarks.peakmem_layers": {"code": "class LayersBenchmarks:\n    def peakmem_layers(self, _):\n        retworkx.layers(self.graph, [0])\n\n    def setup(self, num_nodes):\n        d = math.ceil((math.sqrt((10 * num_nodes) + 6)) / 5)\n        self.graph = retworkx.generators.directed_heavy_hex_graph(d)", "name": "layers.LayersBenchmarks.peakmem_layers", "param_names": ["Number of Nodes"], "params": [["19", "57", "115", "193", "291", "409", "547", "705", "883", "1081", "1299"]], "timeout": 60.0, "type": "peakmemory", "unit": "bytes", "version": "a51a4ae6856ad69138b4a87b7c6993018d7c0ad0a1db70d5432497442910c295"}, "layers.LayersBenchmarks.time_layers": {"code": "class LayersBenchmarks:\n    def time_layers(self, _):\n        retworkx.layers(self.graph, [0])\n\n    def setup(self, num_nodes):\n        d = math.ceil((math.sqrt((10 * num_nodes) + 6)) / 5)\n        self.graph = retworkx.generators.directed_heavy_hex_graph(d)", "min_run_count": 2, "name": "layers.LayersBenchmarks.time_layers", "number": 0, "param_names": ["Number of Nodes"], "params": [["19", "57", "115", "193", "291", "409", "547", "705", "883", "1081", "1299"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dc240bc0b86ba8e93b2e2d18878f0b13374c690f31cfedb15f41fca92c661001", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time___len__": {"code": "class AsiaRoadGraph:\n    def time___len__(self):\n        len(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time___len__", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4c597af8e9b497749df9fdc1fd4bae1b3014d8898a3c8a17125fcaf2930fff89", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_get_node_data": {"code": "class AsiaRoadGraph:\n    def time_get_node_data(self):\n        self.graph.get_node_data(5210)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_get_node_data", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "05a96e1eefc6a07e1b50ad1f39ec40675cfc815b2261834693add39518d86ea1", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_nodes": {"code": "class AsiaRoadGraph:\n    def time_nodes(self):\n        self.graph.nodes()\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_nodes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4743bb13751de754d646a1d558737780dde3e2248e44203702bb3838ec8306bc", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_nodes_indexes": {"code": "class AsiaRoadGraph:\n    def time_nodes_indexes(self):\n        self.graph.node_indexes()\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_nodes_indexes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3a5674297732d1b76deb59bc1634cf9ab6d458a07e1c8257ee633ac9865ecd9c", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_remove_node": {"code": "class AsiaRoadGraph:\n    def time_remove_node(self):\n        self.graph.remove_node(425)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_remove_node", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "be8a010cc3e7df76e7a2e1d3e5ce9eeb5475f30654406317bc9c44a4456a238a", "warmup_time": -1}, "node_benchmarks.AsiaRoadGraph.time_remove_nodes_from": {"code": "class AsiaRoadGraph:\n    def time_remove_nodes_from(self):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"asia.osm.graph.bz2\"\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.AsiaRoadGraph.time_remove_nodes_from", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "92a21d4378223dfddd28c3303990de4ae77faa52ca2e7600a651d3e05073e6ae", "warmup_time": -1}, "node_benchmarks.DiGraphNodeAddition.time_add_from": {"code": "class DiGraphNodeAddition:\n    def time_add_from(self, _, __):\n        self.full_graph.add_nodes_from(self.list_obj)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyDAG()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeAddition.time_add_from", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4b66c0d55b1be171a01173a0474bcd561434822af009d458a72cb0f04dcaad76", "warmup_time": -1}, "node_benchmarks.DiGraphNodeAddition.time_add_loop": {"code": "class DiGraphNodeAddition:\n    def time_add_loop(self, _, __):\n        for i in self.list_obj:\n            self.full_graph.add_node(i)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyDAG()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeAddition.time_add_loop", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eccae2a576976d879d688c17e8dcbdcee42f8071784b318e120721f63b98e60f", "warmup_time": -1}, "node_benchmarks.DiGraphNodeCreation.time_digraph_add_node_from": {"code": "class DiGraphNodeCreation:\n    def time_digraph_add_node_from(self, _, __):\n        self.empty_digraph.add_nodes_from(self.list_objs)\n\n    def setup(self, num_nodes, cycle_check):\n        self.empty_digraph = retworkx.PyDAG(cycle_check)\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeCreation.time_digraph_add_node_from", "number": 0, "param_names": ["Number of Nodes", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1bca5a7991a4b6730eb16394c0472d2d1056283166dc51dd901181ef55d55e6a", "warmup_time": -1}, "node_benchmarks.DiGraphNodeCreation.time_digraph_add_nodes_loop": {"code": "class DiGraphNodeCreation:\n    def time_digraph_add_nodes_loop(self, _, __):\n        for i in self.list_objs:\n            self.empty_digraph.add_node(i)\n\n    def setup(self, num_nodes, cycle_check):\n        self.empty_digraph = retworkx.PyDAG(cycle_check)\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.DiGraphNodeCreation.time_digraph_add_nodes_loop", "number": 0, "param_names": ["Number of Nodes", "Cycle Check"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"], ["False", "True"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6d4ff336be2c7451815278eae4febd8087b21a25ae713a4ce1765bdbf58d2506", "warmup_time": -1}, "node_benchmarks.GraphNodeAddition.time_add_from": {"code": "class GraphNodeAddition:\n    def time_add_from(self, _, __):\n        self.full_graph.add_nodes_from(self.list_obj)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyGraph()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeAddition.time_add_from", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e666d11ccbae81e3fefc03caf9bb0883a93196b83b0286ea6176b09978aff5ca", "warmup_time": -1}, "node_benchmarks.GraphNodeAddition.time_add_loop": {"code": "class GraphNodeAddition:\n    def time_add_loop(self, _, __):\n        for i in self.list_obj:\n            self.full_graph.add_node(i)\n\n    def setup(self, graph_size, num_nodes):\n        self.full_graph = retworkx.PyGraph()\n        self.list_obj = list(range(num_nodes))\n        self.full_graph.add_nodes_from(list(range(graph_size)))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeAddition.time_add_loop", "number": 0, "param_names": ["Graph Size", "Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000"], ["1", "10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "39bd482ad71573985f7683ea59a2df58a66aa5770a90996e7755262918a38463", "warmup_time": -1}, "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_from": {"code": "class GraphNodeCreation:\n    def time_graph_add_nodes_from(self, _):\n        self.empty_graph.add_nodes_from(self.list_objs)\n\n    def setup(self, num_nodes):\n        self.empty_graph = retworkx.PyGraph()\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_from", "number": 0, "param_names": ["Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1aa500a939b2634d5ca86138afbb07c253a68775cbb581d690a9b45a9dd7e6b4", "warmup_time": -1}, "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_loop": {"code": "class GraphNodeCreation:\n    def time_graph_add_nodes_loop(self, _):\n        for i in self.list_objs:\n            self.empty_graph.add_node(i)\n\n    def setup(self, num_nodes):\n        self.empty_graph = retworkx.PyGraph()\n        self.list_objs = list(range(num_nodes))", "min_run_count": 2, "name": "node_benchmarks.GraphNodeCreation.time_graph_add_nodes_loop", "number": 0, "param_names": ["Number of Nodes"], "params": [["1", "10", "100", "1000", "10000", "100000", "1000000", "100000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "04a89c55f741d33359bb365e1dec5bc1ea4e4ad5e159a80861015df7a7e30500", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time___len__": {"code": "class RandomGeometricGraph:\n    def time___len__(self):\n        len(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time___len__", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6eeab28c3a092e678ec08120fe402fa7248948d005b19e9f5632a0ae3450f6c8", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_get_node_data": {"code": "class RandomGeometricGraph:\n    def time_get_node_data(self):\n        self.graph.get_node_data(5210)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_get_node_data", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b708a7ed8783645d1827cd9c3ebded2dcf324c1f5d5647bf0b19b3e5d886b0cf", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_nodes": {"code": "class RandomGeometricGraph:\n    def time_nodes(self):\n        self.graph.nodes()\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_nodes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ce0a3d16b543a0d1946300f59375a9baa09eb1fbf9cb82118e08a73e369b8bbc", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_nodes_indexes": {"code": "class RandomGeometricGraph:\n    def time_nodes_indexes(self):\n        self.graph.node_indexes()\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_nodes_indexes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d3a7fd3c1fffebafdb5f4e10bc2ffc990a11a1fbcf8edf480384ac8b955feba5", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_remove_node": {"code": "class RandomGeometricGraph:\n    def time_remove_node(self):\n        self.graph.remove_node(425)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_remove_node", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ed2a93c9a1fbe4b29449ae55a77d6cbb7ea3feaa48d974f33bd28a6aa997a0e1", "warmup_time": -1}, "node_benchmarks.RandomGeometricGraph.time_remove_nodes_from": {"code": "class RandomGeometricGraph:\n    def time_remove_nodes_from(self):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"rgg_n_2_22_s0.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.RandomGeometricGraph.time_remove_nodes_from", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c8767ea019af3a6e1eaf850d01cf78b9244bdbc495c60b713fbd9e65ab9c2a9", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time___len__": {"code": "class RoadGraphFullUSA:\n    def time___len__(self, _):\n        len(self.graph)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time___len__", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "3f451a0bd63518279367d4edbb1e44a0265eb0f345c32d9fdd144456b977a0a7", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_get_node_data": {"code": "class RoadGraphFullUSA:\n    def time_get_node_data(self, _):\n        self.graph.get_node_data(5210)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_get_node_data", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "62152f93f165c122296fc2228f683f0154de8002d3405c503ea7698aec14a3cf", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_nodes": {"code": "class RoadGraphFullUSA:\n    def time_nodes(self, _):\n        self.graph.nodes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_nodes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "453e185901a406beded31979313b05e19a4c292a7bc6ddabd8ff5a2bcb56b1e1", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_nodes_indexes": {"code": "class RoadGraphFullUSA:\n    def time_nodes_indexes(self, _):\n        self.graph.node_indexes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_nodes_indexes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "d0c1149833c36d552ba35509d957290690729affa3176199eb96a41271e1d190", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_remove_node": {"code": "class RoadGraphFullUSA:\n    def time_remove_node(self, _):\n        self.graph.remove_node(425)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_remove_node", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "1bb0ae0cb0fbe5263c5f0c546afd1f2412ecbb36ee9850e6192222af1171f57a", "warmup_time": -1}, "node_benchmarks.RoadGraphFullUSA.time_remove_nodes_from": {"code": "class RoadGraphFullUSA:\n    def time_remove_nodes_from(self, _):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphFullUSA.time_remove_nodes_from", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "c9a6ce1e5b043ba3c2ca3d6fb7b6abf5a8fa5e5b24fff8fc8e117f731942735b", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time___len__": {"code": "class RoadGraphWesternUSA:\n    def time___len__(self, _):\n        len(self.graph)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time___len__", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4e1cdbe21feb6ee9c69e35b293cff2a16cd8cfd6c70a3fd14b1db03705e1f969", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_get_node_data": {"code": "class RoadGraphWesternUSA:\n    def time_get_node_data(self, _):\n        self.graph.get_node_data(5210)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_get_node_data", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "539cc9685bb01f04905b23658732b36a0a2af7cb6df666213f7fd628a3d41a57", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_nodes": {"code": "class RoadGraphWesternUSA:\n    def time_nodes(self, _):\n        self.graph.nodes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_nodes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "370ddd1cb6e6a913c2f6d214ab3bdde71e51da9c97414fed4d203ff6b38351cb", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_nodes_indexes": {"code": "class RoadGraphWesternUSA:\n    def time_nodes_indexes(self, _):\n        self.graph.node_indexes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_nodes_indexes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d5bd1a8c57c1e481e790116f41f026ae682e617159bbcfa0ae74fb08dce3680a", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_remove_node": {"code": "class RoadGraphWesternUSA:\n    def time_remove_node(self, _):\n        self.graph.remove_node(425)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_remove_node", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "538dba02f09269177e6ea83a9e6c950974ce2b021ba6d4eb90866d52f81076fb", "warmup_time": -1}, "node_benchmarks.RoadGraphWesternUSA.time_remove_nodes_from": {"code": "class RoadGraphWesternUSA:\n    def time_remove_nodes_from(self, _):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.RoadGraphWesternUSA.time_remove_nodes_from", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a2de395889bb9bc07fcd6a1559a4258f86d94f49c9f0061788bc65b36b7ee0b4", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time___len__": {"code": "class TwoDimensionDynamicSimulation:\n    def time___len__(self):\n        len(self.graph)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time___len__", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f6513a41886545790fca7d281385297952c592062bb26d415a3c6d366a63febe", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_get_node_data": {"code": "class TwoDimensionDynamicSimulation:\n    def time_get_node_data(self):\n        self.graph.get_node_data(5210)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_get_node_data", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7c40a3ef294f4435d37feab1793f0b4e7e384c725d850872371034a8b9c977d7", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes": {"code": "class TwoDimensionDynamicSimulation:\n    def time_nodes(self):\n        self.graph.nodes()\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "944bbd74897a2f17f201c388310ba51c13612b96e621717eb634f388ab5540ee", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes_indexes": {"code": "class TwoDimensionDynamicSimulation:\n    def time_nodes_indexes(self):\n        self.graph.node_indexes()\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_nodes_indexes", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7510dcec676b8216b582e94ccc384f7255f9bab137d4978867142b58b43e3e82", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_node": {"code": "class TwoDimensionDynamicSimulation:\n    def time_remove_node(self):\n        self.graph.remove_node(425)\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_node", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "69894d07a827fab89f239dc27237cf6bd795933e6d5c9f03245976d8b44ac608", "warmup_time": -1}, "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_nodes_from": {"code": "class TwoDimensionDynamicSimulation:\n    def time_remove_nodes_from(self):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self):\n        metis_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)),\n            \"graphs\",\n            \"hugetric-00020.graph.bz2\",\n        )\n        self.graph = parse_metis_from_file(metis_file)", "min_run_count": 2, "name": "node_benchmarks.TwoDimensionDynamicSimulation.time_remove_nodes_from", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b10742765a585a250649eb0f837909055f70f8b2086e3c4a5983e12d1566732", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time___len__": {"code": "class USANYCRoadGraph:\n    def time___len__(self, _):\n        len(self.graph)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time___len__", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9dc103e252f9fddc8cb94d08905095b219664845f7f6484e88bcba41cd089320", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_get_node_data": {"code": "class USANYCRoadGraph:\n    def time_get_node_data(self, _):\n        self.graph.get_node_data(5210)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_get_node_data", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b10a64aee0527e4461fdd25fe77464bfa5a110e6308a942da431d3496bf3c53", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_nodes": {"code": "class USANYCRoadGraph:\n    def time_nodes(self, _):\n        self.graph.nodes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_nodes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c26e192cb7752950303b9e8b90d15ceb52193133d25d7d282f1aa61c850471d4", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_nodes_indexes": {"code": "class USANYCRoadGraph:\n    def time_nodes_indexes(self, _):\n        self.graph.node_indexes()\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_nodes_indexes", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c5b3b57642efb00e9f5b7e06923216d1c35c1ef761ea8f5a84e3c3c06fc2f969", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_remove_node": {"code": "class USANYCRoadGraph:\n    def time_remove_node(self, _):\n        self.graph.remove_node(425)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_remove_node", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "78d8f83d95a5fec4c9129ba02f08af101d45edfc86c11ce6add53c5cb3b48ea3", "warmup_time": -1}, "node_benchmarks.USANYCRoadGraph.time_remove_nodes_from": {"code": "class USANYCRoadGraph:\n    def time_remove_nodes_from(self, _):\n        self.graph.remove_nodes_from([425, 525, 625, 725, 825])\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "node_benchmarks.USANYCRoadGraph.time_remove_nodes_from", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e86231a3f75451d5523b66f74eff3e792bc3cdfdc26209d62b5651d72240ece0", "warmup_time": -1}, "paths.PathFunctionBenchmarks.time_all_simple_paths": {"code": "class PathFunctionBenchmarks:\n    def time_all_simple_paths(self, num_nodes, __):\n        self.all_simple_paths_func(self.graph, 1, num_nodes - 2)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42 * num_nodes)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)\n        if hasattr(retworkx, \"dag_all_simple_paths\"):\n            self.all_simple_paths_func = retworkx.dag_all_simple_paths\n        elif hasattr(retworkx, \"digraph_all_simple_paths\"):\n            self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n        else:\n            self.all_simple_paths_func = None", "min_run_count": 2, "name": "paths.PathFunctionBenchmarks.time_all_simple_paths", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c517d87b6ad9a50c1b5e863f2a3b3411c8d8aac8b3951d7a3a87e49f52e9e014", "warmup_time": -1}, "paths.PathFunctionBenchmarks.time_dag_longest_path": {"code": "class PathFunctionBenchmarks:\n    def time_dag_longest_path(self, _, __):\n        retworkx.dag_longest_path(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42 * num_nodes)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)\n        if hasattr(retworkx, \"dag_all_simple_paths\"):\n            self.all_simple_paths_func = retworkx.dag_all_simple_paths\n        elif hasattr(retworkx, \"digraph_all_simple_paths\"):\n            self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n        else:\n            self.all_simple_paths_func = None", "min_run_count": 2, "name": "paths.PathFunctionBenchmarks.time_dag_longest_path", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3bcb1011c9be8223706896f2c41bf6f2f48e8b219cdf7b1f9f9814a10ae60484", "warmup_time": -1}, "paths.PathFunctionBenchmarks.time_dag_longest_path_length": {"code": "class PathFunctionBenchmarks:\n    def time_dag_longest_path_length(self, _, __):\n        retworkx.dag_longest_path_length(self.graph)\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42 * num_nodes)\n        self.graph = retworkx.PyDAG()\n        nodes = []\n        for i in range(num_nodes):\n            nodes.append(self.graph.add_node(i))\n        random.shuffle(nodes)\n        node_ids = itertools.cycle(nodes)\n        for i in range(num_edges):\n            src = next(node_ids)\n            target = next(node_ids)\n            self.graph.add_edge(src, target, i)\n        if hasattr(retworkx, \"dag_all_simple_paths\"):\n            self.all_simple_paths_func = retworkx.dag_all_simple_paths\n        elif hasattr(retworkx, \"digraph_all_simple_paths\"):\n            self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n        else:\n            self.all_simple_paths_func = None", "min_run_count": 2, "name": "paths.PathFunctionBenchmarks.time_dag_longest_path_length", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10", "100", "1000", "10000", "100000", "1000000"], ["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f67da24fce48a3b8184be99d07046b1fe634a8f2cbf908b902b79cd159d8989e", "warmup_time": -1}, "paths.PathsRoadGraphFullUSA.time_astar_shortest_path": {"code": "class PathsRoadGraphFullUSA:\n    def time_astar_shortest_path(self, directed):\n        def match_goal(x):\n            return x == 5123\n    \n        if directed:\n            retworkx.astar_shortest_path(\n                self.graph, 0, match_goal, float, lambda x: self.graph.out_degree(x)\n            )\n        else:\n            retworkx.astar_shortest_path(\n                self.graph, 0, match_goal, float, lambda x: self.graph.degree(x)\n            )\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "paths.PathsRoadGraphFullUSA.time_astar_shortest_path", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "b5d18e442c131e4835324e5ddc5bf9ed126d3e477a641608017bc7475031360e", "warmup_time": -1}, "paths.PathsRoadGraphWesternUSA.time_astar_shortest_path": {"code": "class PathsRoadGraphWesternUSA:\n    def time_astar_shortest_path(self, directed):\n        def match_goal(x):\n            return x == 5123\n    \n        if directed:\n            retworkx.astar_shortest_path(\n                self.graph, 0, match_goal, float, lambda x: self.graph.out_degree(x)\n            )\n        else:\n            retworkx.astar_shortest_path(\n                self.graph, 0, match_goal, float, lambda x: self.graph.degree(x)\n            )\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)", "min_run_count": 2, "name": "paths.PathsRoadGraphWesternUSA.time_astar_shortest_path", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e0e207d793380b1b2ac4f5b6428d70f6c8bf2bf9be10c4a82dd8de3d6c689fb3", "warmup_time": -1}, "paths.PathsUSANYCRoadGraph.time_all_simple_paths": {"code": "class PathsUSANYCRoadGraph:\n    def time_all_simple_paths(self, _):\n        # NOTE: this doesn't really traverse the graph, a full traversal is\n        # too slow (for now) for a graph this large and takes over 10mins\n        self.all_simple_paths_func(self.graph, 1, 0)\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)\n        if directed:\n            if hasattr(retworkx, \"dag_all_simple_paths\"):\n                self.all_simple_paths_func = retworkx.dag_all_simple_paths\n                self.astar_func = retworkx.dag_astar_shortest_path\n            elif hasattr(retworkx, \"digraph_all_simple_paths\"):\n                self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n                self.astar_func = retworkx.digraph_astar_shortest_path\n            else:\n                raise NotImplementedError\n        else:\n            if hasattr(retworkx, \"graph_all_simple_paths\"):\n                self.all_simple_paths_func = retworkx.graph_all_simple_paths\n                self.astar_func = retworkx.graph_astar_shortest_path\n            else:\n                raise NotImplementedError", "min_run_count": 2, "name": "paths.PathsUSANYCRoadGraph.time_all_simple_paths", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e67603ccd9ecf9ad915a84f9fb1d1d4354eb4ee968d9c322a92d14eca30a5f1f", "warmup_time": -1}, "paths.PathsUSANYCRoadGraph.time_astar_shortest_path": {"code": "class PathsUSANYCRoadGraph:\n    def time_astar_shortest_path(self, directed):\n        def match_goal(x):\n            return x == 5123\n    \n        if directed:\n            retworkx.astar_shortest_path(\n                self.graph, 0, match_goal, float, lambda x: self.graph.out_degree(x)\n            )\n        else:\n            retworkx.astar_shortest_path(\n                self.graph, 0, match_goal, float, lambda x: self.graph.degree(x)\n            )\n\n    def setup(self, directed):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=directed)\n        if directed:\n            if hasattr(retworkx, \"dag_all_simple_paths\"):\n                self.all_simple_paths_func = retworkx.dag_all_simple_paths\n                self.astar_func = retworkx.dag_astar_shortest_path\n            elif hasattr(retworkx, \"digraph_all_simple_paths\"):\n                self.all_simple_paths_func = retworkx.digraph_all_simple_paths\n                self.astar_func = retworkx.digraph_astar_shortest_path\n            else:\n                raise NotImplementedError\n        else:\n            if hasattr(retworkx, \"graph_all_simple_paths\"):\n                self.all_simple_paths_func = retworkx.graph_all_simple_paths\n                self.astar_func = retworkx.graph_astar_shortest_path\n            else:\n                raise NotImplementedError", "min_run_count": 2, "name": "paths.PathsUSANYCRoadGraph.time_astar_shortest_path", "number": 0, "param_names": ["Directed Graph"], "params": [["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cab70c025a19881ff06b173f7e72f305c01bcf8c05651e742fde0188a023871b", "warmup_time": -1}, "paths.TestAstar.time_astar_shortest_path": {"code": "class TestAstar:\n    def time_astar_shortest_path(self, num_nodes, __):\n        def match_goal(x):\n            return x == 1\n    \n        retworkx.astar_shortest_path(\n            self.graph, 0, match_goal, float, lambda x: self.graph.out_degree(x)\n        )\n\n    def setup(self, num_nodes, num_edges):\n        random.seed(42)\n        self.graph = retworkx.directed_gnm_random_graph(num_nodes, num_edges)\n        for x in self.graph.node_indexes():\n            self.graph[x] = x\n        for edge in self.graph.edge_indices():\n            self.graph.update_edge_by_index(edge, random.randint(1, 10000))", "min_run_count": 2, "name": "paths.TestAstar.time_astar_shortest_path", "number": 0, "param_names": ["Number of Nodes", "Number of Edges"], "params": [["10"], ["100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "120f1870481b63df32a825dd34cb1ff536ed1d13733338e72b0c6a79a3faf53b", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_ancestors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_ancestors(self):\n        retworkx.ancestors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_ancestors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "20982f4e5adadfa69eb5b72003e6445723058aba68df7dca64e0c124ea85af64", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_bfs_successors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_bfs_successors(self):\n        retworkx.bfs_successors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_bfs_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "e90c457422e3b69d5e85f15fddc5e202954e3bd570e1550f50433dd9ff528257", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_descendants": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_descendants(self):\n        retworkx.descendants(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_descendants", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "66d047bd60fc89e0db5584fbdbddd3ce4b9ee826482a5b233e40b65bc33e122f", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_number_weakly_connected_components(self):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_number_weakly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "108854279486099b81ed5a33fe31c01b31c8d7c954ba08c3e853809c396ab443", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_predecessors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_predecessors(self):\n        self.graph.predecessors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_predecessors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "30392f1ccff5b7743194a7e57469b57fbd3cef1d70c5e6afb6dbfe03446f4918", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_strongly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_strongly_connected_components(self):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_strongly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "ac634d04246f324f8d38bcd601bb59a1ab397dfacc86208e7dfb93743e7f7500", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_successors": {"code": "class PredecessorsSuccessorsRoadGraphFullUSA:\n    def time_successors(self):\n        self.graph.successors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.USA.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphFullUSA.time_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "a74d91f3ac69f99d4226c697b6f658e3e09b0e42f622d0aba353961c20c39938", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_ancestors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_ancestors(self):\n        retworkx.ancestors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_ancestors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "40f2e954e01d9f46239be43e90584e3de9a5298dc4d30fb3485b04e188fa19d7", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_bfs_successors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_bfs_successors(self):\n        retworkx.bfs_successors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_bfs_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5fbedbee6ecd96f8f68cdfc2eef740e5fef0cc0e8809b9a517dfff806c04631e", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_descendants": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_descendants(self):\n        retworkx.descendants(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_descendants", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f6ce21b70bc1bb689a2f1a1427dc0b527ec0661e8a54d579d09d2d1f9f4210fc", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_number_weakly_connected_components(self):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_number_weakly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0505a0d00ee435a48f3eab36f7d65fc2745546c0d17c0675f1a26730d1d17874", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_predecessors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_predecessors(self):\n        self.graph.predecessors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_predecessors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "39726b93ed66b295de336472f817aab5b3d6bc4892d89e5e1f0392eef3f0b787", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_strongly_connected_components": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_strongly_connected_components(self):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_strongly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e0164a042fc06989883e9f593b7a7afded3e983bb7052da7ec0f37de29f7179d", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_successors": {"code": "class PredecessorsSuccessorsRoadGraphWesternUSA:\n    def time_successors(self):\n        self.graph.successors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-t.W.gr.gz\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsRoadGraphWesternUSA.time_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d33e969c39511dd1b13e8107f7fe2f456d5fb39e3d586a491b83ebbe6ee1a66e", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_ancestors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_ancestors(self):\n        retworkx.ancestors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_ancestors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ea4268b322ea202e12b3d578655a8e4c9ad5a4a1c925c4c5621b7b6d5c654bcd", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_bfs_successors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_bfs_successors(self):\n        retworkx.bfs_successors(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_bfs_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ce5d2f76a3d93ec9adbef2000526d4450c1ae8809c4bb2a9130ca75c7abba961", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_descendants": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_descendants(self):\n        retworkx.descendants(self.graph, 10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_descendants", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5ea4bc74da00551a696f9629f57bab64b53bcdb438af293b20f68292de2e7bbe", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_number_weakly_connected_components": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_number_weakly_connected_components(self):\n        retworkx.number_weakly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_number_weakly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c44f72f5209bf87e7566caf936e84f745924efcc6d64843e8d019751ea08dcce", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_predecessors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_predecessors(self):\n        self.graph.predecessors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_predecessors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "57a94edc98dcb4cb3053319d8cd6ca009db394f8d05df937ef29ac60f11dc9ad", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_strongly_connected_components": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_strongly_connected_components(self):\n        retworkx.strongly_connected_components(self.graph)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_strongly_connected_components", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6d133335b6c963405633b82f5835323dcbea4ff1aafbe631cafd4f663eaedf9c", "warmup_time": -1}, "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_successors": {"code": "class PredecessorsSuccessorsUSANYCRoadGraph:\n    def time_successors(self):\n        self.graph.successors(10240)\n\n    def setup(self):\n        gr_file = os.path.join(\n            os.path.dirname(os.path.abspath(__file__)), \"graphs\", \"USA-road-d.NY.gr\"\n        )\n        self.graph = parse_gr_from_file(gr_file, directed=True)", "min_run_count": 2, "name": "predecessors_successors.PredecessorsSuccessorsUSANYCRoadGraph.time_successors", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "06afa22f16fd6f319fe766dcb871029b009cd656c5a32ea7a789d749ef821a4c", "warmup_time": -1}, "qiskit_terra.QiskitTranspilerBenchmarks.peakmem_transpile": {"code": "class QiskitTranspilerBenchmarks:\n    def peakmem_transpile(self, level):\n        transpile(\n            self.circuit,\n            backend=self.backend,\n            seed_transpiler=4242,\n            optimization_level=level,\n        )\n\n    def setup(self, _):\n        self.backend = FakeRochester()\n        self.circuit = QuantumVolume(53, seed=42)\n        self.circuit.measure_all()", "name": "qiskit_terra.QiskitTranspilerBenchmarks.peakmem_transpile", "param_names": ["transpiler optimization level"], "params": [["0", "1", "2", "3"]], "timeout": 240, "type": "peakmemory", "unit": "bytes", "version": "0.15.1"}, "qiskit_terra.QiskitTranspilerBenchmarks.time_transpile": {"code": "class QiskitTranspilerBenchmarks:\n    def time_transpile(self, level):\n        transpile(\n            self.circuit,\n            backend=self.backend,\n            seed_transpiler=4242,\n            optimization_level=level,\n        )\n\n    def setup(self, _):\n        self.backend = FakeRochester()\n        self.circuit = QuantumVolume(53, seed=42)\n        self.circuit.measure_all()", "min_run_count": 2, "name": "qiskit_terra.QiskitTranspilerBenchmarks.time_transpile", "number": 0, "param_names": ["transpiler optimization level"], "params": [["0", "1", "2", "3"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 240, "type": "time", "unit": "seconds", "version": "0.15.1", "warmup_time": -1}, "toplogical_sort.TopologicalSortBenchmarks.time_lexicographical_topological_sort": {"code": "class TopologicalSortBenchmarks:\n    def time_lexicographical_topological_sort(self, _, __):\n        retworkx.lexicographical_topological_sort(self.graph, lambda x: str(x))\n\n    def setup(self, num_nodes):\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        node_iter = iter(nodes)\n        parents = [next(node_iter)]\n        count = 0\n        while parents:\n            source = parents.pop(0)\n            try:\n                target = next(nodes)\n                parents.append(target)\n                self.graph.add_edge(source, target, count)\n                count += 1\n            except StopIteration:\n                break", "min_run_count": 2, "name": "toplogical_sort.TopologicalSortBenchmarks.time_lexicographical_topological_sort", "number": 0, "param_names": ["Number of Nodes"], "params": [["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3557a76026d4606b06b7a398aab9359c419755ee67ece548c5c579825c4f8757", "warmup_time": -1}, "toplogical_sort.TopologicalSortBenchmarks.time_topological_sort": {"code": "class TopologicalSortBenchmarks:\n    def time_topological_sort(self, _, __):\n        retworkx.topological_sort(self.graph)\n\n    def setup(self, num_nodes):\n        random.seed(42)\n        self.graph = retworkx.PyDAG()\n        nodes = self.graph.add_nodes_from(list(range(num_nodes)))\n        node_iter = iter(nodes)\n        parents = [next(node_iter)]\n        count = 0\n        while parents:\n            source = parents.pop(0)\n            try:\n                target = next(nodes)\n                parents.append(target)\n                self.graph.add_edge(source, target, count)\n                count += 1\n            except StopIteration:\n                break", "min_run_count": 2, "name": "toplogical_sort.TopologicalSortBenchmarks.time_topological_sort", "number": 0, "param_names": ["Number of Nodes"], "params": [["10", "100", "1000", "10000", "100000", "1000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9d18a15d4546437210c2e51b82dd177136884f513fc9e4ce2e77653ba5ec93ab", "warmup_time": -1}}, "machines": {"zeong": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-6900K CPU @ 4.20GHz", "machine": "zeong", "os": "Linux 4.18.3-arch1-1-ARCH", "ram": "128GB", "version": 1}}, "tags": {"0.0.1": 28, "0.0.10": 91, "0.0.2": 40, "0.0.3": 46, "0.0.4": 61, "0.0.5": 62, "0.0.6": 78, "0.0.7": 81, "0.0.8": 86, "0.0.9": 88, "0.1.0": 107, "0.1.1": 123, "0.10.0": 2499, "0.10.1": 2504, "0.10.2": 2587, "0.2.0": 156, "0.3.0": 176, "0.3.1": 185, "0.3.2": 192, "0.3.3": 214, "0.3.4": 269, "0.4.0": 449, "0.5.0": 682, "0.6.0": 920, "0.7.0": 991, "0.7.1": 995, "0.7.2": 1013, "0.8.0": 1252, "0.9.0": 1923}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}